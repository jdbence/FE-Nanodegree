'use strict';
/**
 * @description El Singleton used for manipulating DOM elements
 * @constructor
 */
var El = (function El() {
	var instance = function instance() {};

	/**
	 * @description Removes the className from each element in the array
	 * @param {array} elements - Array of DOM elements
	 * @param {string} className - Class to remove
	 */
	instance.removeClass = function removeClass(elements, className) {
		var i, c;
		if (elements) {
			if (!this.isHTMLCollection(elements)) {
				elements = [elements];
			}
			for (i = 0; i < elements.length; i++) {
				c = elements[i].className.replace(' ' + className, '');
				elements[i].className = c;
			}
		}
	};

	/**
	 * @description Adds the className on each element in the array
	 * @param {array} elements - Array of DOM elements
	 * @param {string} className - Class to add
	 */
	instance.addClass = function addClass(elements, className) {
		var i;

		if (elements) {
			if (!this.isHTMLCollection(elements)) {
				elements = [elements];
			}
			for (i = 0; i < elements.length; i++) {
				if (elements[i].className.indexOf(' ' + className) < 0) {
					elements[i].className += ' ' + className;
				}
			}
		}
	};

	/**
	 * @description Adds a listener on the element
	 * @param {array} elements - Array of DOM elements
	 * @param {string} event - Event to listen for
	 * @param {function} callback - Function to call when the event is captured
	 */
	instance.addListener = function addListener(elements, event, callback) {
		var i;

		if (elements) {
			if (elements.length === undefined) {
				elements = [elements];
			}
			for (i = 0; i < elements.length; i++) {
				elements[i].addEventListener(event, callback);
			}
		}
	};

	/**
	 * @description Removes the hidden class from the elements with the given className or #ID
	 * @param {string} identifier - The elements to find
	 */
	instance.show = function show(identifier) {
		this.removeClass(this.getElements(identifier), 'hidden');
	};

	/**
	 * @description Adds the hidden class on the elements with the given className or #ID
	 * @param {string} identifier - The elements to find
	 */
	instance.hide = function hide(identifier) {
		this.addClass(this.getElements(identifier), 'hidden');
	};

	/**
	 * @description Finds all the elements with the className or #ID
	 * @param {string} identifier - The elements to find
	 */
	instance.getElements = function getElements(identifier) {
		if (this.isString(identifier)) {
			if (identifier.indexOf('#') !== -1) {
				return document.getElementById(identifier);
			}
			return document.getElementsByClassName(identifier);
		}
		return null;
	};

	/**
	 * @description Checks if the variable is a string
	 * @param {string} variable - The variable to check
	 */
	instance.isString = function isString(variable) {
		return this.isType(variable, '[object String]');
	};

	/**
	 * @description Checks if the variable is a HTMLCollection
	 * @param {string} variable - The variable to check
	 */
	instance.isHTMLCollection = function isHTMLCollection(variable) {
		return this.isType(variable, '[object HTMLCollection]');
	};

	/**
	 * @description Checks if the variable is the type
	 * @param {string} variable - The variable to check
	 */
	instance.isType = function isType(variable, type) {
		return Object.prototype.toString.call(variable) === type;
	};

	return instance;
})();

'use strict';
/**
* @description Entity sets all default variables to the owner
* @constructor
* @param {object} owner - The initial row
* @param {number} x - The initial x location
* @param {number} y - The initial y location
* @param {string} sprite - The display sprite
* @param {number} offsetX - The initial x offset
* @param {number} offsetY - The initial y offset
*/
var Entity = function Entity(owner, x, y, sprite, offsetX, offsetY) {
	this.owner = owner;
	owner.x = x;
	owner.y = y;
	owner.sprite = sprite || null;
	owner.offsetX = offsetX || 0;
	owner.offsetY = offsetY || 0;
	owner.flipped = false;
	owner.alpha = 1;
	owner.isAlive = true;
	owner.speed = 0;
	owner.angle = 0;
};

'use strict';
/* Resources.js
 * This is simple an image loading utility. It eases the process of loading
 * image files so that they can be used within your game. It also includes
 * a simple "caching" layer so it will reuse cached images if you attempt
 * to load the same image multiple times.
 */
(function() {
	var resourceCache = {};
	var loading = [];
	var readyCallbacks = [];

	/* This is the publicly accessible image loading function. It accepts
	   * an array of strings pointing to image files or a string for a single
	   * image. It will then call our private image loading function accordingly.
	   */
	function load(urlOrArr) {
		if (urlOrArr instanceof Array) {
			/* If the developer passed in an array of images
			       * loop through each value and call our image
			       * loader on that image file
			       */
			urlOrArr.forEach(function(url) {
				_load(url);
			});
		} else {
			/* The developer did not pass an array to this function,
			       * assume the value is a string and call our image loader
			       * directly.
			       */
			_load(urlOrArr);
		}
	}

	/* This is our private image loader function, it is
	   * called by the public image loader function.
	   */
	function _load(url) {
		if (resourceCache[url]) {
			/* If this URL has been previously loaded it will exist within
			       * our resourceCache array. Just return that image rather
			       * re-loading the image.
			       */
			return resourceCache[url];
		} else {
			/* This URL has not been previously loaded and is not present
			       * within our cache; we'll need to load this image.
			       */
			var img = new Image();
			img.onload = function() {
				/* Once our image has properly loaded, add it to our cache
				         * so that we can simply return this image if the developer
				         * attempts to load this file in the future.
				         */
				resourceCache[url] = img;

				/* Once the image is actually loaded and properly cached,
				         * call all of the onReady() callbacks we have defined.
				         */
				if (isReady()) {
					readyCallbacks.forEach(function(func) { func(); });
				}
			};

			/* Set the initial cache value to false, this will change when
			       * the image's onload event handler is called. Finally, point
			       * the images src attribute to the passed in URL.
			       */
			resourceCache[url] = false;
			img.src = url;
		}
	}

	/* This is used by developer's to grab references to images they know
	   * have been previously loaded. If an image is cached, this functions
	   * the same as calling load() on that URL.
	   */
	function get(url) {
		return resourceCache[url];
	}

	/* This function determines if all of the images that have been requested
	   * for loading have in fact been completed loaded.
	   */
	function isReady() {
		var ready = true;
		for (var k in resourceCache) {
			if (resourceCache.hasOwnProperty(k) &&
			!resourceCache[k]) {
				ready = false;
			}
		}
		return ready;
	}

	/* This function will add a function to the callback stack that is called
	   * when all requested images are properly loaded.
	   */
	function onReady(func) {
		readyCallbacks.push(func);
	}

	/* This object defines the publicly accessible functions available to
	   * developers by creating a global Resources object.
	   */
	window.Resources = {
		load: load,
		get: get,
		onReady: onReady,
		isReady: isReady
	};
})();

'use strict';
/**
 * @description Collision Singleton used for checking collision between two sensors
 * @constructor
 */
var Collision = (function Prototype() {
	var instance = function instance() {};
	/**
	 * @description Uses box collision to check if two sensors are touching
	 * @param {Senor} sensorA - Bounding rect A
	 * @param {Senor} sensorB - Bounding rect B
	 * @returns {boolean} based on sensor overlap
	 */
	instance.isColliding = function isColliding(sensorA, sensorB) {
		return (sensorA.x < sensorB.x + sensorB.width &&
			sensorA.x + sensorB.width > sensorB.x &&
			sensorA.y < sensorB.y + sensorB.height &&
			sensorA.height + sensorA.y > sensorB.y);
	};
	return instance;
})();

'use strict';
/* Engine.js
 * This file provides the game loop functionality (update entities and render),
 * draws the initial game board on the screen, and then calls the update and
 * render methods on your player and enemy objects (defined in your app.js).
 *
 * A game engine works by drawing the entire game screen over and over, kind of
 * like a flipbook you may have created as a kid. When your player moves across
 * the screen, it may look like just that image/character is moving or being
 * drawn but that is not the case. What's really happening is the entire "scene"
 * is being drawn over and over, presenting the illusion of animation.
 *
 * This engine is available globally via the Engine variable and it also makes
 * the canvas' context (ctx) object globally available to make writing app.js
 * a little simpler to work with.
 */

var Engine = (function Engine(global) {
	/* Predefine the variables we'll be using within this scope,
	   * create the canvas element, grab the 2D context for that canvas
	   * set the canvas elements height/width and add it to the DOM.
	   */
	var doc = global.document,
	win = global.window,
	canvas = doc.createElement('canvas'),
	ctx = canvas.getContext('2d'),
	lastTime,
	running = false,
	instance = function instance(){};

	instance.entities = [];
	instance.width = canvas.width = 505;
	instance.height = canvas.height = 606;
	canvas.className += ' canvas-game';
	doc.getElementsByClassName('level')[0].appendChild(canvas);

	/* This function serves as the kickoff point for the game loop itself
	   * and handles properly calling the update and render methods.
	   */
	function main() {
		if (running) {
			/* Get our time delta information which is required if your game
			       * requires smooth animation. Because everyone's computer processes
			       * instructions at different speeds we need a constant value that
			       * would be the same for everyone (regardless of how fast their
			       * computer is) - hurray time!
			       */
			var now = Date.now(),
			dt = (now - lastTime) / 1000.0;

			/* Call our update/render functions, pass along the time delta to
			 * our update function since it may be used for smooth animation.
			 */
			update(dt);
			render();

			/* Set our lastTime variable which is used to determine the time delta
			 * for the next time this function is called.
			 */
			lastTime = now;

			/* Use the browser's requestAnimationFrame function to call this
			 * function again as soon as the browser is able to draw another frame.
			 */
			win.requestAnimationFrame(main);
		}
	}

	/* This function does some initial setup that should only occur once,
	   * particularly setting the lastTime variable that is required for the
	   * game loop.
	   */
	function init() {
		instance.reset();
		running = true;
		lastTime = Date.now();
		main();
	}

	/* This function is called by main (our game loop) and itself calls all
	   * of the functions which may need to update entity's data. Based on how
	   * you implement your collision detection (when two entities occupy the
	   * same space, for instance when your character should die), you may find
	   * the need to add an additional function call here. For now, we've left
	   * it commented out - you may or may not want to implement this
	   * functionality this way (you could just implement collision detection
	   * on the entities themselves within your app.js file).
	   */
	function update(dt) {
		updateEntities(dt);
		// checkCollisions();
	}

	/* This is called by the update function  and loops through all of the
	   * objects within your instance.entities array as defined in app.js and calls
	   * their update() methods. It will then call the update function for your
	   * player object. These update methods should focus purely on updating
	   * the data/properties related to  the object. Do your drawing in your
	   * render methods.
	   */
	function updateEntities(dt) {
		instance.entities.forEach(function EachEnemy(enemy) {
			enemy.update(dt);
		});
		player.update(dt);
	}

	/* This function initially draws the "game level", it will then call
	   * the renderEntities function. Remember, this function is called every
	   * game tick (or loop of the game engine) because that's how games work -
	   * they are flipbooks creating the illusion of animation but in reality
	   * they are just drawing the entire screen over and over.
	   */
	function render() {
		/* This array holds the relative URL to the image used
		     * for that particular row of the game level.
		     */
		var rowImages = [
		'images/water-block.png',   // Top row is water
		'images/stone-block.png',   // Row 1 of 3 of stone
		'images/stone-block.png',   // Row 2 of 3 of stone
		'images/stone-block.png',   // Row 3 of 3 of stone
		'images/grass-block.png',   // Row 1 of 2 of grass
		'images/grass-block.png'    // Row 2 of 2 of grass
		],
		numRows = 6,
		numCols = 5,
		row, col;

		//-- Clear the entire canvas
		ctx.clearRect(0, 0, canvas.width, canvas.height);

		/* Loop through the number of rows and columns we've defined above
		     * and, using the rowImages array, draw the correct image for that
		     * portion of the "grid"
		     */
		for (row = 0; row < numRows; row++) {
			for (col = 0; col < numCols; col++) {
				/* The drawImage function of the canvas' context element
				         * requires 3 parameters: the image to draw, the x coordinate
				         * to start drawing and the y coordinate to start drawing.
				         * We're using our Resources helpers to refer to our images
				         * so that we get the benefits of caching these images, since
				         * we're using them over and over.
				         */
				ctx.drawImage(Resources.get(rowImages[row]), col * 101, row * 83);
			}
		}

		renderEntities();
	}

	/* This function is called by the render function and is called on each game
	   * tick. It's purpose is to then call the render functions you have defined
	   * on your enemy and player entities within app.js
	   */
	function renderEntities() {
		/* Loop through all of the objects within the instance.entities array and call
		     * the render function you have defined.
		     */
		instance.entities.forEach(function(enemy) {
			enemy.render(ctx);
		});

		player.render(ctx);
	}

	/* This function does nothing but it could have been a good place to
	   * handle game reset states - maybe a new game menu or a game over screen
	   * those sorts of things. It's only called once by the init() method.
	   */
	instance.reset = function reset() {
		running = false;
	};

	instance.pause = function pause() {
		running = false;
	};

	instance.preload = function preload() {
		/* Go ahead and load all of the images we know we're going to need to
		     * draw our game level. Then set init as the callback method, so that when
		     * all of these images are properly loaded our game will start.
		     */
		Resources.load(locations('images/', 'png'));

		function locations(folder, format) {
			var resources = [
			'char-boy',
			'char-cat-girl',
			'char-horn-girl',
			'char-pink-girl',
			'char-princess-girl',
			'enemy-bug',
			'Gem Blue',
			'Gem Green',
			'Gem Orange',
			'grass-block',
			'Heart',
			'Key',
			'Rock',
			'Selector',
			'Star',
			'stone-block',
			'water-block'
			];
			return resources.map(function(el) {
				return folder + el + '.' + format;
			});
		}

		if (Resources.isReady()) {
			init();
		}else {
			Resources.onReady(init);
		}

	};

	/* Assign the canvas' context object to the global variable (the window
	   * object when run in a browser) so that developer's can use it more easily
	   * from within their app.js files.
	   */
	global.ctx = ctx;

	return instance;
})(this);

'use strict';
/**
* @description Model Singleton used for storing state data
* @constructor
*/
var Model = (function Model() {
	var data = {};
	var instance = function instance() {};

	/**
	 * @description Sets a value to a key
	 * @param {string} key - The property to store the value under
	 * @param {number} value - The value of the key
	 * @returns {*} The value of the key
	 */
	instance.set = function set(key, value) {
		data[key] = value;
		return value;
	};

	/**
	 * @description Returns the value set to the key
	 * @returns {*} The value of the key
	 */
	instance.get = function get(key) {
		return data[key];
	};

	return instance;
})();

'use strict';
/**
* @description A Timer class that updates manually using with delta time
* @constructor
*/
var Timer = function Timer(intervals, delay) {
	this.intervals = intervals;
	this.delay = delay;
	this.running = false;
	this.listeners = {};
	this.time = 0;
	this.laps = 0;
};

(function Prototype() {
	/**
	 * @description Resets the timer and flags it as running
	 */
	this.start = function start() {
		this.running = true;
		this.time = this.delay;
		this.laps = this.intervals;
	};

	/**
	 * @description Uses the delta time to manually update the timer
	 * @param {number} delta - Time since last update
	 */
	this.update = function update(delta) {
		if (this.running) {
			this.time = Math.max(0, this.time - delta);
			if (this.time === 0) {
				this.laps -= 1;
				if (this.laps <= 0) {
					this.running = false;
					this.dispatch('COMPLETE');
				}else {
					this.time = this.delay;
					this.dispatch('UPDATE');
				}
			}
		}
	};

	/**
	 * @description Adds a listener for the specified event
	 * @param {string} event - The event to listen for
	 * @param {function} listener - The callback function
	 */
	this.on = function on(event, listener) {
		if (!this.listeners.hasOwnProperty(event)) {
			this.listeners[event] = [];
		}
		this.listeners[event].push(listener);
	};

	/**
	 * @description Attempts to invoke a callback method for the given event
	 * @param {string} event - The event to dispatch
	 */
	this.dispatch = function dispatch(event) {
		var i;
		var list;
		if (this.listeners.hasOwnProperty(event)) {
			list = this.listeners[event];
			for (i = 0; i < list.length; i++) {
				list[i](this);
			}
		}
	};
}).call(Timer.prototype);

'use strict';
/**
* @description Grid Singleton used for positioning things on a Grid
* @constructor
*/
var Grid = (function Grid() {
	var instance = function instance() {};

	instance.cellWidth = 101;
	instance.cellHeight = 83;
	instance.columns = 5;
	instance.rows = 6;
	instance.offsetY = 50;

	/**
	 * @description Determines the x location based on the column
	 * @param {int} column - The column
	 * @returns {number} The screen x position
	 */
	instance.getXFromColumn = function getXFromColumn(column) {
		var col = Math.max(0, Math.min(column, instance.columns - 1));
		return col * instance.cellWidth;
	};

	/**
	 * @description Determines the y location based on the row
	 * @param {int} row - The row
	 * @returns {number} The screen y position
	 */
	instance.getYFromRow = function getYFromRow(row) {
		row = Math.max(0, Math.min(row, instance.rows - 1));
		return instance.offsetY + row * instance.cellHeight;
	};

	return instance;
})();

'use strict';
/**
* @description Handles level creation
* @constructor
*/
var Level = function Level() {
	this.reset();
};

(function Prototype() {
	/**
	 * @description Reset's level variables to original values
	 */
	this.reset = function reset() {
		this.level = Model.set('level', 0);
		this.lastLevel = 7;
		Model.set('level_total_time', 15);
		Model.set('level_complete', false);
	};

	/**
	 * @description Advances the current level by one
	 */
	this.next = function next() {
		this.level = Model.set('level', this.level + 1);
	};

	/**
	 * @description Creates all the entities for the current level
	 */
	this.addEntities = function addEntities() {
		var data = this.levelData();
		var i;
		Engine.entities = [];

		for (i = 0; i < data.length; i++) {
			if (data[i].hasOwnProperty('t')) {
				if (data[i].t === 'key') {
					Engine.entities.push(new Key(data[i].r, data[i].c));
				}else if (data[i].t === 'water') {
					Engine.entities.push(new Water(data[i].r, data[i].c));
				}
			}else {
				Engine.entities.push(new Enemy(data[i].r, data[i].c, data[i].s));
			}
		}
	};

	/**
	 * @description Returns the JSON entities for the given level
	 * @returns {array}
	 */
	this.levelData = function levelData() {
		//  Formatted so it's easier to see the levels (not following Udacity JS standards)
		//  jscs:disable
		if (this.level === 0) {
			return [
			{r: 0, c: 0, t: 'water'}, {r: 0, c: 1, t: 'water'}, {r: 0, c: 2, t: 'key'}, {r: 0, c: 3, t: 'water'}, {r: 0, c: 4, t: 'water'}
			];
		}else if (this.level === 1) {
			return [
			{r: 3, c: 0, s: 200}, {r: 3, c: 2, s: 200}, {r: 3, c: 4, s: 200},
			{r: 0, c: 0, t: 'water'}, {r: 0, c: 1, t: 'water'}, {r: 0, c: 2, t: 'key'}, {r: 0, c: 3, t: 'water'}, {r: 0, c: 4, t: 'water'}
			];
		}else if (this.level === 2) {
			return [
			{r: 1, c: 0, s: -100}, {r: 1, c: 1, s: -100}, {r: 1, c: 3, s: -100}, {r: 1, c: 4, s: -100},
			{r: 0, c: 0, t: 'water'}, {r: 0, c: 1, t: 'water'}, {r: 0, c: 2, t: 'key'}, {r: 0, c: 3, t: 'water'}, {r: 0, c: 4, t: 'water'}
			];
		}else if (this.level === 3) {
			return [
			{r: 2, c: 0, s: 500}, {r: 2, c: 4, s: 600},
			{r: 0, c: 0, t: 'water'}, {r: 0, c: 1, t: 'water'}, {r: 0, c: 2, t: 'key'}, {r: 0, c: 3, t: 'water'}, {r: 0, c: 4, t: 'water'}
			];
		}else if (this.level === 4) {
			return [
			{r: 1, c: 0, s: -100}, {r: 1, c: 1, s: -100}, {r: 1, c: 3, s: -100}, {r: 1, c: 4, s: -100},
			{r: 3, c: 0, s: 200}, {r: 3, c: 2, s: 200}, {r: 3, c: 4, s: 200},
			{r: 0, c: 0, t: 'water'}, {r: 0, c: 1, t: 'water'}, {r: 0, c: 2, t: 'key'}, {r: 0, c: 3, t: 'water'}, {r: 0, c: 4, t: 'water'}
			];
		}else if (this.level === 5) {
			return [
			{r: 2, c: 0, s: 500}, {r: 2, c: 4, s: 600},
			{r: 3, c: 0, s: 200}, {r: 3, c: 2, s: 200}, {r: 3, c: 4, s: 200},
			{r: 0, c: 0, t: 'water'}, {r: 0, c: 1, t: 'water'}, {r: 0, c: 2, t: 'key'}, {r: 0, c: 3, t: 'water'}, {r: 0, c: 4, t: 'water'}
			];
		}else if (this.level === 6) {
			return [
			{r: 1, c: 0, s: -100}, {r: 1, c: 1, s: -100}, {r: 1, c: 3, s: -100}, {r: 1, c: 4, s: -100},
			{r: 2, c: 0, s: 500}, {r: 2, c: 4, s: 600},
			{r: 0, c: 0, t: 'water'}, {r: 0, c: 1, t: 'water'}, {r: 0, c: 2, t: 'key'}, {r: 0, c: 3, t: 'water'}, {r: 0, c: 4, t: 'water'}
			];
		}
		//  jscs:disable
		return [
		{r: 1, c: 0, s: -100}, {r: 1, c: 1, s: -100}, {r: 1, c: 3, s: -100}, {r: 1, c: 4, s: -100},
		{r: 2, c: 0, s: 500}, {r: 2, c: 4, s: 600},
		{r: 3, c: 0, s: 200}, {r: 3, c: 2, s: 200}, {r: 3, c: 4, s: 200},
		{r: 0, c: 0, t: 'water'}, {r: 0, c: 1, t: 'water'}, {r: 0, c: 2, t: 'key'}, {r: 0, c: 3, t: 'water'}, {r: 0, c: 4, t: 'water'}
		];
	};
}).call(Level.prototype);

'use strict';
/**
 * @description Scene Singleton used for changing the scene view
 * @constructor
 */
var Scene = (function Scene() {
	var instance = function instance() {};
	var level = new Level();
	var onCharacterClicked = function onCharacterClicked(el) {
		var s = el.target.src;
		player.sprite = s.slice(s.indexOf('/images/') + 1, s.length);

		El.removeClass(El.getElements('selected-char'), 'selected-char');
		El.addClass(el.target, 'selected-char');
	};
	/**
	 * @description Shows the Character selection scene
	 */
	instance.startMenu = function startMenu() {
		var characters = document.getElementsByClassName('char');
		var i;

		for (i = 0; i < characters.length; i++) {
			characters[i].addEventListener('click', onCharacterClicked);
		}

		Engine.reset();

		El.show('char_select');
		El.hide('level');
		El.hide('gameover');
		El.hide('gamewin');
		scene = 'char_select';
	};

	/**
	 * @description Shows the Game scene
	 */
	instance.startGame = function startGame(reset) {
		reset = reset || false;

		if (reset) {
			level.reset();
		} else {
			Model.set('level_complete', false);
		}

		Engine.preload();
		player.respawn();

		level.addEntities();
		Engine.entities.push(ui);
		ui.start();

		El.show('level');
		El.hide('char_select');
		El.hide('gameover');
		El.hide('gamewin');
		scene = 'level';
	};

	/**
	 * @description Shows the Game Over popup
	 */
	instance.endGame = function endGame() {
		El.show('gameover');
		Engine.pause();
	};

	/**
	 * @description Shows the Game Win popup
	 */
	instance.winGame = function winGame() {
		El.show('gamewin');
		Engine.pause();
	};

	/**
	 * @description The player picked up the key. Show star explosion and advance level after timeout
	 */
	instance.levelComplete = function levelComplete() {
		Model.set('level_complete', true);
		Engine.entities.push(new Explosion(0, 2));
		setTimeout(instance.nextLevel, 1500);
	};

	/**
	 * @description Advance to the next level or end the game if no more levels
	 */
	instance.nextLevel = function nextLevel() {
		level.next();

		if (level.level > level.lastLevel) {
			instance.winGame();
		} else {
			instance.startGame();
		}
	};

	return instance;
})();

'use strict';
/**
* @description A sensor used as a collision box that can be rendered to the screen for testing
* @constructor
* @param {number} x - The x location
* @param {number} y - The y location
* @param {number} width - How long the sensor is
* @param {number} height - How tall the sensor is
* @param {number} offsetX - The offset in the x direction
* @param {number} offsetY - The offset in the y direction
*/
var Sensor = function Sensor(x, y, width, height, offsetX, offsetY) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.debug = true;
};

(function Prototype() {
	/**
	 * @description Renders this entity to the canvas
	 * @param {context} ctx - The canvas's context
	 */
	this.render = function render(ctx) {
		if (this.debug) {
			ctx.beginPath();
			ctx.strokeStyle = 'red';
			ctx.rect(this.x, this.y, this.width, this.height);
			ctx.stroke();
		}
	};

	/**
	 * @description Updates the sensor's position
	 * @param {int} x - The x location
	 * @param {int} y - The y location
	 */
	this.position = function position(x, y) {
		this.x = x + this.offsetX;
		this.y = y + this.offsetY;
	};
}).call(Sensor.prototype);

'use strict';
/**
* @description A component that renders the owners sprite according to position, alpha and direction
* @constructor
*/
var Render = function Render(owner) {
	this.owner = owner;
};

(function Prototype() {
	var p = {x: 0, y: 0};
	/**
	  * @description Renders the owner's sprite
	  * @param {context} ctx - The canvas's context
	  */
	this.render = function render(ctx) {
		var flipped = this.owner.flipped ? -1 : 1;
		var pos = this.getPosition();
		ctx.save();
		ctx.scale(flipped, 1);
		ctx.globalAlpha = this.owner.alpha || 1;
		ctx.drawImage(Resources.get(this.owner.sprite), pos.x, pos.y, 101, 171);
		ctx.restore();
	};

	/**
	  * @description Returns the formatted position
	  */
	this.getPosition = function getPosition() {
		var flipped = this.owner.flipped ? -1 : 1;
		p.x = (this.owner.x + this.owner.offsetX) * flipped;
		p.x += (flipped === 1 ? 0 : -101);
		p.y = this.owner.y + this.owner.offsetY;
		return p;
	};
}).call(Render.prototype);

'use strict';
/**
* @description The ingame information display
* @constructor
*/
var UI = function UI() {
	this.keys = 0;
	this.levelTime = 0;
	this.time = 0;
};

(function Prototype() {
	/**
	 * @description Resets the level information and starts the game timer
	 */
	this.start = function start() {
		this.keys = Model.get('level');
		this.levelTime = Model.get('level_total_time');

		this.levelTimer = new Timer(1, this.levelTime);
		this.levelTimer.on('COMPLETE', this.onTimerComplete);
		this.levelTimer.start();
	};

	/**
	 * @description The level timer has completed
	 */
	this.onTimerComplete = function onTimerComplete() {
		if (!Model.get('level_complete')) {
			Scene.endGame();
		}
	};

	/**
	 * @description Formated string of time left (expects >0 && <60 seconds)
	 * @returns {string} Seconds left on time
	 */
	this.formattedTime = function formattedTime() {
		var time = Math.round(this.levelTimer.time);
		return '00:' + (time > 9 ? time : '0' + time);
	};

	/**
	 * @description Renders text to the screen
	 * @param {context} ctx - The canvas's context
	 * @param {string} string - The string to display
	 * @param {number} x - The x location
	 * @param {number} y - The y location
	 * @param {string} align - The canvas's context
	 */
	this.text = function text(ctx, string, x, y, align) {
		ctx.save();
		ctx.font = '30px Comic Sans MS';
		if (align === 'left' || align === 'right' || align === 'center') {
			ctx.textAlign = align;
		}
		ctx.fillText(string, x, y);
		ctx.restore();
	};

	/**
	 * @description Updates the timer and key information
	 * @param {int} dt - Time since last update
	 */
	this.update = function update(dt) {
		if (!Model.get('level_complete')) {
			this.keys = Model.get('level');
			this.levelTimer.update(dt);
		}
	};

	/**
	 * @description Renders this entity to the canvas
	 * @param {context} ctx - The canvas's context
	 */
	this.render = function render(ctx) {
		this.text(ctx, 'Keys: x' + this.keys, 0, 30);
		this.text(ctx, 'Time: ' + this.formattedTime(), Engine.width, 30, 'right');
	};
}).call(UI.prototype);

'use strict';
/**
* @description Key entity
* @constructor
* @param {int} row - The initial row
* @param {int} col - The initial column
*/
var Key = function Key(row, col) {
	this.entity = new Entity(this,
		Grid.getXFromColumn(col),
		Grid.getYFromRow(row),
		'images/Key.png',
		0,
		-(171 - 138) - Grid.offsetY);
	this.sensor = new Sensor(0, 0, 50, 30, 25, 25);
	this.renderer = new Render(this);
};

(function Prototype() {
	/**
	 * @description Checks if this entity is colliding with the player
	 * @param {int} dt - Time since last update
	 */
	this.update = function update(dt) {
		this.sensor.position(this.x, this.y);
		if (player && player.isAlive && this.isAlive) {
			if (Collision.isColliding(this.sensor, player.sensor)) {
				this.isAlive = false;
				player.hit('key');
			}
		}
	};

	/**
	 * @description Renders this entity to the canvas
	 * @param {context} ctx - The canvas's context
	 */
	this.render = function render(ctx) {
		this.renderer.render(ctx);
		this.sensor.render(ctx);
	};
}).call(Key.prototype);

'use strict';
/**
* @description Water entity
* @constructor
* @param {int} row - The initial row
* @param {int} col - The initial column
*/
var Water = function Water(row, col) {
	this.entity = new Entity(this,
		Grid.getXFromColumn(col),
		Grid.getYFromRow(row),
		'images/Key.png',
		0,
		-(171 - 138) - Grid.offsetY);
	this.sensor = new Sensor(0, 0, 50, 30, 25, 25);
};

(function Prototype() {
	/**
	 * @description Checks if this entity is colliding with the player
	 * @param {int} dt - Time since last update
	 */
	this.update = function update(dt) {
		this.sensor.position(this.x, this.y);

		if (player && player.isAlive) {
			if (Collision.isColliding(this.sensor, player.sensor)) {
				player.hit('water');
			}
		}
	};

	/**
	 * @description Renders this entity to the canvas
	 * @param {context} ctx - The canvas's context
	 */
	this.render = function render(ctx) {
		this.sensor.render(ctx);
	};
}).call(Water.prototype);

'use strict';
/**
 * @description Enemy entity
 * @constructor
 * @param {int} row - The initial row
 * @param {int} col - The initial column
 * @param {number} speed - The initial speed
 */
var Enemy = function Enemy(row, col, speed) {
	this.entity = new Entity(this,
		Grid.getXFromColumn(col),
		Grid.getYFromRow(row),
		'images/enemy-bug.png',
		0, -(171 - 138) - Grid.offsetY);
	this.row = row;
	this.speed = speed;
	this.flipped = speed < 0;
	this.sensor = new Sensor(0, 0, 50, 50, 25, 12);
	this.renderer = new Render(this);
};

(function Prototype() {
	/**
	 * @description Checks if this entity is colliding with the player and keeps target on screen by wrapping x location
	 * @param {int} dt - Time since last update
	 */
	this.update = function update(dt) {
		this.x += dt * this.speed;

		//  Wrap
		if (this.x > (Grid.columns * Grid.cellWidth) + Grid.cellWidth) {
			this.x = Grid.getXFromColumn(0) - Grid.cellWidth;
		} else if (this.x < -Grid.cellWidth) {
			this.x = (Grid.columns * Grid.cellWidth) + Grid.cellWidth;
		}

		this.sensor.position(this.x, this.y);
		if (player && player.isAlive) {
			if (Collision.isColliding(this.sensor, player.sensor)) {
				player.hit('enemy');
			}
		}
	};

	/**
	 * @description Renders this entity to the canvas
	 * @param {context} ctx - The canvas's context
	 */
	this.render = function render(ctx) {
		this.renderer.render(ctx);
		this.sensor.render(ctx);
	};
}).call(Enemy.prototype);

'use strict';
/**
* @description Player entity
* @constructor
*/
var Player = function Player() {
	this.entity = new Entity(this,
		0,
		0,
		'images/char-boy.png',
		0,
		-(171 - 138) - Grid.offsetY);
	this.isAlive = false;
	this.alpha = 0;
	this.sensor = new Sensor(0, 0, 50, 30, 25, 25);
	this.renderer = new Render(this);
	this.blinkTimer = new Timer(5, 0.2);

	var ref = this;

	var onBlinkTimerComplete = function onBlinkTimerComplete() {
		ref.alpha = 1;
		ref.isAlive = true;
	};

	var onBlinkTimerUpdate = function onBlinkTimerUpdate() {
		ref.alpha = (ref.alpha === 0.4 ? 1 : 0.4);
	};

	var onKeyUp = function onKeyUp(e) {
		ref.handleInput(e);
	};

	this.blinkTimer.on('COMPLETE', onBlinkTimerComplete);
	this.blinkTimer.on('UPDATE', onBlinkTimerUpdate);
	document.addEventListener('keyup', onKeyUp);

	this.respawn();
};

(function Prototype() {
	var inputMap = {
		37: 'left',
		38: 'up',
		39: 'right',
		40: 'down'
	};

	var inputResponseMap = {
		left: {axis: 'x', dir: -1},
		up: {axis: 'y', dir: -1},
		right: {axis: 'x', dir: 1},
		down: {axis: 'y', dir: 1}
	};

	/**
	 * @description Resets the player to the initial position
	 */
	this.respawn = function respawn() {
		this.sensor.x = this.x = Grid.getXFromColumn(2);
		this.sensor.y = this.y = Grid.getYFromRow(5);
		this.isAlive = false;
		this.alpha = 0.4;
		this.blinkTimer.start();
	};

	/**
	 * @description A entity has hit the player
	 * @param {string} invoker - Type of object that hit the player
	 */
	this.hit = function hit(invoker) {
		if (invoker === 'water' || invoker === 'enemy') {
			this.respawn();
		}else if (invoker === 'key') {
			Scene.levelComplete();
		}
	};

	/**
	 * @description Gets the position on the grid based on player's input
	 * @param {string} axis - The x or y axis
	 * @param {input} dir - The positive or negative direction
	 * @returns {number} The final position
	 */
	this.getMovement = function getMovement(axis, dir) {
		var v;

		if (axis === 'x') {
			v = Math.floor(this.x / Grid.cellWidth) + dir;
			return Grid.getXFromColumn(v);
		}

		v = Math.floor(this.y / Grid.cellHeight) + dir;
		return Grid.getYFromRow(v);
	};

	/**
	 * @description Changes the player position based on input
	 * @param {event} e - The event that occured
	 */
	this.handleInput = function handleInput(e) {
		var input = inputMap[e.keyCode];
		if (input && this.isAlive === true && !Model.get('level_complete')) {
			var map = inputResponseMap[input];

			//  Movement
			if (map.hasOwnProperty('axis')) {
				this[map.axis] = this.getMovement(map.axis, map.dir);
			}
		}
	};

	/**
	 * @description Updates the players timer and sensor
	 * @param {number} dt - Time since last update
	 */
	this.update = function update(dt) {
		this.sensor.position(this.x, this.y);
		if (!this.isAlive) {
			this.blinkTimer.update(dt);
		}
	};

	/**
	 * @description Renders this entity to the canvas
	 * @param {context} ctx - The canvas's context
	 */
	this.render = function render(ctx) {
		this.renderer.render(ctx);
		this.sensor.render(ctx);
	};
}).call(Player.prototype);

'use strict';
/**
* @description Star entity
* @constructor
* @param {int} row - The initial row
* @param {int} col - The initial column
*/
var Star = function Star(row, col) {
	this.entity = new Entity(this,
		Grid.getXFromColumn(col),
		Grid.getYFromRow(row),
		'images/Star.png',
		0,
		-(171 - 138) - Grid.offsetY);
	this.renderer = new Render(this);
	this.speed = 500;
	this.angle = Math.round(Math.random() * 180) * Math.PI / 180;
};

(function Prototype() {
	/**
	 * @description Moves the star in the direction of the angle and lowers opacity
	 * @param {int} dt - Time since last update
	 */
	this.update = function update(dt) {
		this.x += this.speed * Math.cos(this.angle) * dt;
		this.y += this.speed * Math.sin(this.angle) * dt;
		this.alpha = Math.max(0.01, this.alpha - 1 * dt);
	};

	/**
	 * @description Renders this entity to the canvas
	 * @param {context} ctx - The canvas's context
	 */
	this.render = function render(ctx) {
		this.renderer.render(ctx);
	};
}).call(Star.prototype);

'use strict';
/**
* @description Key entity
* @constructor
* @param {int} row - The initial row
* @param {int} col - The initial column
*/
var Explosion = function Explosion(row, col){
    this.stars = [];
    this.addStars(row, col, 10);
};

(function Prototype() {
    
    /**
    * @description Adds the stars
    * @param {int} row - The y location
    * @param {int} col - The x location
    * @param {int} total - Amount of stars
    */
    this.addStars = function addStars(row, col, total){
        var i;
        for(i=0; i<total; i++){
            this.stars.push(new Star(row, col));
        }
    }

    /**
    * @description Moves all the stars
    * @param {int} dt - Time since last update
    */
    this.update = function update(dt) {
        var total = this.stars.length;
        var i;
        if(total > 0){
            if(this.stars[0].alpha <= 0.01){
                this.stars = [];
            }else{
                for(i=0; i<total; i++){
                    this.stars[i].update(dt);
                }
            }
        }
    };
    
    /**
    * @description Renders the stars to the canvas
    * @param {context} ctx - The canvas's context
    */
    this.render = function render(ctx) {
        var total = this.stars.length;
        var i;
        for(i=0; i<total; i++){
            this.stars[i].render(ctx);
        }
    };

}).call(Explosion.prototype);
'use strict';
var Scene = Scene || {};
var El = El || {};
var UI = UI || {};
var Player = Player || {};
var player = new Player();
var ui = new UI();
var scene = '';
var App = (function App() {
	var onPlayClicked = function onPlayClicked() {
		Scene.startGame(true);
	};
	var onReplayClicked = function onReplayClicked() {
		Scene.startGame();
	};
	var onMenuClicked = function onMenuClicked() {
		Scene.startMenu();
	};

	El.addListener(El.getElements('btn-play')[0], 'click', onPlayClicked);
	El.addListener(El.getElements('btn-replay')[0], 'click', onReplayClicked);
	El.addListener(El.getElements('btn-menu'), 'click', onMenuClicked);

	//	Default show the start menu
	Scene.startMenu();
	//	Scene.startGame();
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsLmpzIiwiZW50aXR5LmpzIiwicmVzb3VyY2VzLmpzIiwiY29sbGlzaW9uLmpzIiwiZW5naW5lLmpzIiwibW9kZWwuanMiLCJ0aW1lci5qcyIsImdyaWQuanMiLCJsZXZlbC5qcyIsInNjZW5lLmpzIiwic2Vuc29yLmpzIiwicmVuZGVyLmpzIiwidWkuanMiLCJrZXkuanMiLCJ3YXRlci5qcyIsImVuZW15LmpzIiwicGxheWVyLmpzIiwic3Rhci5qcyIsImV4cGxvc2lvbi5qcyIsImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbk9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gRWwgU2luZ2xldG9uIHVzZWQgZm9yIG1hbmlwdWxhdGluZyBET00gZWxlbWVudHNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgRWwgPSAoZnVuY3Rpb24gRWwoKSB7XG5cdHZhciBpbnN0YW5jZSA9IGZ1bmN0aW9uIGluc3RhbmNlKCkge307XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIHRoZSBjbGFzc05hbWUgZnJvbSBlYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5XG5cdCAqIEBwYXJhbSB7YXJyYXl9IGVsZW1lbnRzIC0gQXJyYXkgb2YgRE9NIGVsZW1lbnRzXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgLSBDbGFzcyB0byByZW1vdmVcblx0ICovXG5cdGluc3RhbmNlLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbWVudHMsIGNsYXNzTmFtZSkge1xuXHRcdHZhciBpLCBjO1xuXHRcdGlmIChlbGVtZW50cykge1xuXHRcdFx0aWYgKCF0aGlzLmlzSFRNTENvbGxlY3Rpb24oZWxlbWVudHMpKSB7XG5cdFx0XHRcdGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcblx0XHRcdH1cblx0XHRcdGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjID0gZWxlbWVudHNbaV0uY2xhc3NOYW1lLnJlcGxhY2UoJyAnICsgY2xhc3NOYW1lLCAnJyk7XG5cdFx0XHRcdGVsZW1lbnRzW2ldLmNsYXNzTmFtZSA9IGM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gQWRkcyB0aGUgY2xhc3NOYW1lIG9uIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXlcblx0ICogQHBhcmFtIHthcnJheX0gZWxlbWVudHMgLSBBcnJheSBvZiBET00gZWxlbWVudHNcblx0ICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSAtIENsYXNzIHRvIGFkZFxuXHQgKi9cblx0aW5zdGFuY2UuYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50cywgY2xhc3NOYW1lKSB7XG5cdFx0dmFyIGk7XG5cblx0XHRpZiAoZWxlbWVudHMpIHtcblx0XHRcdGlmICghdGhpcy5pc0hUTUxDb2xsZWN0aW9uKGVsZW1lbnRzKSkge1xuXHRcdFx0XHRlbGVtZW50cyA9IFtlbGVtZW50c107XG5cdFx0XHR9XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW1lbnRzW2ldLmNsYXNzTmFtZS5pbmRleE9mKCcgJyArIGNsYXNzTmFtZSkgPCAwKSB7XG5cdFx0XHRcdFx0ZWxlbWVudHNbaV0uY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzTmFtZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIEFkZHMgYSBsaXN0ZW5lciBvbiB0aGUgZWxlbWVudFxuXHQgKiBAcGFyYW0ge2FycmF5fSBlbGVtZW50cyAtIEFycmF5IG9mIERPTSBlbGVtZW50c1xuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgLSBFdmVudCB0byBsaXN0ZW4gZm9yXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyBjYXB0dXJlZFxuXHQgKi9cblx0aW5zdGFuY2UuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcihlbGVtZW50cywgZXZlbnQsIGNhbGxiYWNrKSB7XG5cdFx0dmFyIGk7XG5cblx0XHRpZiAoZWxlbWVudHMpIHtcblx0XHRcdGlmIChlbGVtZW50cy5sZW5ndGggPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRlbGVtZW50cyA9IFtlbGVtZW50c107XG5cdFx0XHR9XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0ZWxlbWVudHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgdGhlIGhpZGRlbiBjbGFzcyBmcm9tIHRoZSBlbGVtZW50cyB3aXRoIHRoZSBnaXZlbiBjbGFzc05hbWUgb3IgI0lEXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyIC0gVGhlIGVsZW1lbnRzIHRvIGZpbmRcblx0ICovXG5cdGluc3RhbmNlLnNob3cgPSBmdW5jdGlvbiBzaG93KGlkZW50aWZpZXIpIHtcblx0XHR0aGlzLnJlbW92ZUNsYXNzKHRoaXMuZ2V0RWxlbWVudHMoaWRlbnRpZmllciksICdoaWRkZW4nKTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIEFkZHMgdGhlIGhpZGRlbiBjbGFzcyBvbiB0aGUgZWxlbWVudHMgd2l0aCB0aGUgZ2l2ZW4gY2xhc3NOYW1lIG9yICNJRFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRpZmllciAtIFRoZSBlbGVtZW50cyB0byBmaW5kXG5cdCAqL1xuXHRpbnN0YW5jZS5oaWRlID0gZnVuY3Rpb24gaGlkZShpZGVudGlmaWVyKSB7XG5cdFx0dGhpcy5hZGRDbGFzcyh0aGlzLmdldEVsZW1lbnRzKGlkZW50aWZpZXIpLCAnaGlkZGVuJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBGaW5kcyBhbGwgdGhlIGVsZW1lbnRzIHdpdGggdGhlIGNsYXNzTmFtZSBvciAjSURcblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkZW50aWZpZXIgLSBUaGUgZWxlbWVudHMgdG8gZmluZFxuXHQgKi9cblx0aW5zdGFuY2UuZ2V0RWxlbWVudHMgPSBmdW5jdGlvbiBnZXRFbGVtZW50cyhpZGVudGlmaWVyKSB7XG5cdFx0aWYgKHRoaXMuaXNTdHJpbmcoaWRlbnRpZmllcikpIHtcblx0XHRcdGlmIChpZGVudGlmaWVyLmluZGV4T2YoJyMnKSAhPT0gLTEpIHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkZW50aWZpZXIpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoaWRlbnRpZmllcik7XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gQ2hlY2tzIGlmIHRoZSB2YXJpYWJsZSBpcyBhIHN0cmluZ1xuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFyaWFibGUgLSBUaGUgdmFyaWFibGUgdG8gY2hlY2tcblx0ICovXG5cdGluc3RhbmNlLmlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcodmFyaWFibGUpIHtcblx0XHRyZXR1cm4gdGhpcy5pc1R5cGUodmFyaWFibGUsICdbb2JqZWN0IFN0cmluZ10nKTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIENoZWNrcyBpZiB0aGUgdmFyaWFibGUgaXMgYSBIVE1MQ29sbGVjdGlvblxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFyaWFibGUgLSBUaGUgdmFyaWFibGUgdG8gY2hlY2tcblx0ICovXG5cdGluc3RhbmNlLmlzSFRNTENvbGxlY3Rpb24gPSBmdW5jdGlvbiBpc0hUTUxDb2xsZWN0aW9uKHZhcmlhYmxlKSB7XG5cdFx0cmV0dXJuIHRoaXMuaXNUeXBlKHZhcmlhYmxlLCAnW29iamVjdCBIVE1MQ29sbGVjdGlvbl0nKTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIENoZWNrcyBpZiB0aGUgdmFyaWFibGUgaXMgdGhlIHR5cGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IHZhcmlhYmxlIC0gVGhlIHZhcmlhYmxlIHRvIGNoZWNrXG5cdCAqL1xuXHRpbnN0YW5jZS5pc1R5cGUgPSBmdW5jdGlvbiBpc1R5cGUodmFyaWFibGUsIHR5cGUpIHtcblx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhcmlhYmxlKSA9PT0gdHlwZTtcblx0fTtcblxuXHRyZXR1cm4gaW5zdGFuY2U7XG59KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4qIEBkZXNjcmlwdGlvbiBFbnRpdHkgc2V0cyBhbGwgZGVmYXVsdCB2YXJpYWJsZXMgdG8gdGhlIG93bmVyXG4qIEBjb25zdHJ1Y3RvclxuKiBAcGFyYW0ge29iamVjdH0gb3duZXIgLSBUaGUgaW5pdGlhbCByb3dcbiogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgaW5pdGlhbCB4IGxvY2F0aW9uXG4qIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGluaXRpYWwgeSBsb2NhdGlvblxuKiBAcGFyYW0ge3N0cmluZ30gc3ByaXRlIC0gVGhlIGRpc3BsYXkgc3ByaXRlXG4qIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRYIC0gVGhlIGluaXRpYWwgeCBvZmZzZXRcbiogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFkgLSBUaGUgaW5pdGlhbCB5IG9mZnNldFxuKi9cbnZhciBFbnRpdHkgPSBmdW5jdGlvbiBFbnRpdHkob3duZXIsIHgsIHksIHNwcml0ZSwgb2Zmc2V0WCwgb2Zmc2V0WSkge1xuXHR0aGlzLm93bmVyID0gb3duZXI7XG5cdG93bmVyLnggPSB4O1xuXHRvd25lci55ID0geTtcblx0b3duZXIuc3ByaXRlID0gc3ByaXRlIHx8IG51bGw7XG5cdG93bmVyLm9mZnNldFggPSBvZmZzZXRYIHx8IDA7XG5cdG93bmVyLm9mZnNldFkgPSBvZmZzZXRZIHx8IDA7XG5cdG93bmVyLmZsaXBwZWQgPSBmYWxzZTtcblx0b3duZXIuYWxwaGEgPSAxO1xuXHRvd25lci5pc0FsaXZlID0gdHJ1ZTtcblx0b3duZXIuc3BlZWQgPSAwO1xuXHRvd25lci5hbmdsZSA9IDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogUmVzb3VyY2VzLmpzXG4gKiBUaGlzIGlzIHNpbXBsZSBhbiBpbWFnZSBsb2FkaW5nIHV0aWxpdHkuIEl0IGVhc2VzIHRoZSBwcm9jZXNzIG9mIGxvYWRpbmdcbiAqIGltYWdlIGZpbGVzIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCB3aXRoaW4geW91ciBnYW1lLiBJdCBhbHNvIGluY2x1ZGVzXG4gKiBhIHNpbXBsZSBcImNhY2hpbmdcIiBsYXllciBzbyBpdCB3aWxsIHJldXNlIGNhY2hlZCBpbWFnZXMgaWYgeW91IGF0dGVtcHRcbiAqIHRvIGxvYWQgdGhlIHNhbWUgaW1hZ2UgbXVsdGlwbGUgdGltZXMuXG4gKi9cbihmdW5jdGlvbigpIHtcblx0dmFyIHJlc291cmNlQ2FjaGUgPSB7fTtcblx0dmFyIGxvYWRpbmcgPSBbXTtcblx0dmFyIHJlYWR5Q2FsbGJhY2tzID0gW107XG5cblx0LyogVGhpcyBpcyB0aGUgcHVibGljbHkgYWNjZXNzaWJsZSBpbWFnZSBsb2FkaW5nIGZ1bmN0aW9uLiBJdCBhY2NlcHRzXG5cdCAgICogYW4gYXJyYXkgb2Ygc3RyaW5ncyBwb2ludGluZyB0byBpbWFnZSBmaWxlcyBvciBhIHN0cmluZyBmb3IgYSBzaW5nbGVcblx0ICAgKiBpbWFnZS4gSXQgd2lsbCB0aGVuIGNhbGwgb3VyIHByaXZhdGUgaW1hZ2UgbG9hZGluZyBmdW5jdGlvbiBhY2NvcmRpbmdseS5cblx0ICAgKi9cblx0ZnVuY3Rpb24gbG9hZCh1cmxPckFycikge1xuXHRcdGlmICh1cmxPckFyciBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHQvKiBJZiB0aGUgZGV2ZWxvcGVyIHBhc3NlZCBpbiBhbiBhcnJheSBvZiBpbWFnZXNcblx0XHRcdCAgICAgICAqIGxvb3AgdGhyb3VnaCBlYWNoIHZhbHVlIGFuZCBjYWxsIG91ciBpbWFnZVxuXHRcdFx0ICAgICAgICogbG9hZGVyIG9uIHRoYXQgaW1hZ2UgZmlsZVxuXHRcdFx0ICAgICAgICovXG5cdFx0XHR1cmxPckFyci5mb3JFYWNoKGZ1bmN0aW9uKHVybCkge1xuXHRcdFx0XHRfbG9hZCh1cmwpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8qIFRoZSBkZXZlbG9wZXIgZGlkIG5vdCBwYXNzIGFuIGFycmF5IHRvIHRoaXMgZnVuY3Rpb24sXG5cdFx0XHQgICAgICAgKiBhc3N1bWUgdGhlIHZhbHVlIGlzIGEgc3RyaW5nIGFuZCBjYWxsIG91ciBpbWFnZSBsb2FkZXJcblx0XHRcdCAgICAgICAqIGRpcmVjdGx5LlxuXHRcdFx0ICAgICAgICovXG5cdFx0XHRfbG9hZCh1cmxPckFycik7XG5cdFx0fVxuXHR9XG5cblx0LyogVGhpcyBpcyBvdXIgcHJpdmF0ZSBpbWFnZSBsb2FkZXIgZnVuY3Rpb24sIGl0IGlzXG5cdCAgICogY2FsbGVkIGJ5IHRoZSBwdWJsaWMgaW1hZ2UgbG9hZGVyIGZ1bmN0aW9uLlxuXHQgICAqL1xuXHRmdW5jdGlvbiBfbG9hZCh1cmwpIHtcblx0XHRpZiAocmVzb3VyY2VDYWNoZVt1cmxdKSB7XG5cdFx0XHQvKiBJZiB0aGlzIFVSTCBoYXMgYmVlbiBwcmV2aW91c2x5IGxvYWRlZCBpdCB3aWxsIGV4aXN0IHdpdGhpblxuXHRcdFx0ICAgICAgICogb3VyIHJlc291cmNlQ2FjaGUgYXJyYXkuIEp1c3QgcmV0dXJuIHRoYXQgaW1hZ2UgcmF0aGVyXG5cdFx0XHQgICAgICAgKiByZS1sb2FkaW5nIHRoZSBpbWFnZS5cblx0XHRcdCAgICAgICAqL1xuXHRcdFx0cmV0dXJuIHJlc291cmNlQ2FjaGVbdXJsXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0LyogVGhpcyBVUkwgaGFzIG5vdCBiZWVuIHByZXZpb3VzbHkgbG9hZGVkIGFuZCBpcyBub3QgcHJlc2VudFxuXHRcdFx0ICAgICAgICogd2l0aGluIG91ciBjYWNoZTsgd2UnbGwgbmVlZCB0byBsb2FkIHRoaXMgaW1hZ2UuXG5cdFx0XHQgICAgICAgKi9cblx0XHRcdHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcblx0XHRcdGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0LyogT25jZSBvdXIgaW1hZ2UgaGFzIHByb3Blcmx5IGxvYWRlZCwgYWRkIGl0IHRvIG91ciBjYWNoZVxuXHRcdFx0XHQgICAgICAgICAqIHNvIHRoYXQgd2UgY2FuIHNpbXBseSByZXR1cm4gdGhpcyBpbWFnZSBpZiB0aGUgZGV2ZWxvcGVyXG5cdFx0XHRcdCAgICAgICAgICogYXR0ZW1wdHMgdG8gbG9hZCB0aGlzIGZpbGUgaW4gdGhlIGZ1dHVyZS5cblx0XHRcdFx0ICAgICAgICAgKi9cblx0XHRcdFx0cmVzb3VyY2VDYWNoZVt1cmxdID0gaW1nO1xuXG5cdFx0XHRcdC8qIE9uY2UgdGhlIGltYWdlIGlzIGFjdHVhbGx5IGxvYWRlZCBhbmQgcHJvcGVybHkgY2FjaGVkLFxuXHRcdFx0XHQgICAgICAgICAqIGNhbGwgYWxsIG9mIHRoZSBvblJlYWR5KCkgY2FsbGJhY2tzIHdlIGhhdmUgZGVmaW5lZC5cblx0XHRcdFx0ICAgICAgICAgKi9cblx0XHRcdFx0aWYgKGlzUmVhZHkoKSkge1xuXHRcdFx0XHRcdHJlYWR5Q2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oZnVuYykgeyBmdW5jKCk7IH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHQvKiBTZXQgdGhlIGluaXRpYWwgY2FjaGUgdmFsdWUgdG8gZmFsc2UsIHRoaXMgd2lsbCBjaGFuZ2Ugd2hlblxuXHRcdFx0ICAgICAgICogdGhlIGltYWdlJ3Mgb25sb2FkIGV2ZW50IGhhbmRsZXIgaXMgY2FsbGVkLiBGaW5hbGx5LCBwb2ludFxuXHRcdFx0ICAgICAgICogdGhlIGltYWdlcyBzcmMgYXR0cmlidXRlIHRvIHRoZSBwYXNzZWQgaW4gVVJMLlxuXHRcdFx0ICAgICAgICovXG5cdFx0XHRyZXNvdXJjZUNhY2hlW3VybF0gPSBmYWxzZTtcblx0XHRcdGltZy5zcmMgPSB1cmw7XG5cdFx0fVxuXHR9XG5cblx0LyogVGhpcyBpcyB1c2VkIGJ5IGRldmVsb3BlcidzIHRvIGdyYWIgcmVmZXJlbmNlcyB0byBpbWFnZXMgdGhleSBrbm93XG5cdCAgICogaGF2ZSBiZWVuIHByZXZpb3VzbHkgbG9hZGVkLiBJZiBhbiBpbWFnZSBpcyBjYWNoZWQsIHRoaXMgZnVuY3Rpb25zXG5cdCAgICogdGhlIHNhbWUgYXMgY2FsbGluZyBsb2FkKCkgb24gdGhhdCBVUkwuXG5cdCAgICovXG5cdGZ1bmN0aW9uIGdldCh1cmwpIHtcblx0XHRyZXR1cm4gcmVzb3VyY2VDYWNoZVt1cmxdO1xuXHR9XG5cblx0LyogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGFsbCBvZiB0aGUgaW1hZ2VzIHRoYXQgaGF2ZSBiZWVuIHJlcXVlc3RlZFxuXHQgICAqIGZvciBsb2FkaW5nIGhhdmUgaW4gZmFjdCBiZWVuIGNvbXBsZXRlZCBsb2FkZWQuXG5cdCAgICovXG5cdGZ1bmN0aW9uIGlzUmVhZHkoKSB7XG5cdFx0dmFyIHJlYWR5ID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBrIGluIHJlc291cmNlQ2FjaGUpIHtcblx0XHRcdGlmIChyZXNvdXJjZUNhY2hlLmhhc093blByb3BlcnR5KGspICYmXG5cdFx0XHQhcmVzb3VyY2VDYWNoZVtrXSkge1xuXHRcdFx0XHRyZWFkeSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVhZHk7XG5cdH1cblxuXHQvKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYWRkIGEgZnVuY3Rpb24gdG8gdGhlIGNhbGxiYWNrIHN0YWNrIHRoYXQgaXMgY2FsbGVkXG5cdCAgICogd2hlbiBhbGwgcmVxdWVzdGVkIGltYWdlcyBhcmUgcHJvcGVybHkgbG9hZGVkLlxuXHQgICAqL1xuXHRmdW5jdGlvbiBvblJlYWR5KGZ1bmMpIHtcblx0XHRyZWFkeUNhbGxiYWNrcy5wdXNoKGZ1bmMpO1xuXHR9XG5cblx0LyogVGhpcyBvYmplY3QgZGVmaW5lcyB0aGUgcHVibGljbHkgYWNjZXNzaWJsZSBmdW5jdGlvbnMgYXZhaWxhYmxlIHRvXG5cdCAgICogZGV2ZWxvcGVycyBieSBjcmVhdGluZyBhIGdsb2JhbCBSZXNvdXJjZXMgb2JqZWN0LlxuXHQgICAqL1xuXHR3aW5kb3cuUmVzb3VyY2VzID0ge1xuXHRcdGxvYWQ6IGxvYWQsXG5cdFx0Z2V0OiBnZXQsXG5cdFx0b25SZWFkeTogb25SZWFkeSxcblx0XHRpc1JlYWR5OiBpc1JlYWR5XG5cdH07XG59KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gQ29sbGlzaW9uIFNpbmdsZXRvbiB1c2VkIGZvciBjaGVja2luZyBjb2xsaXNpb24gYmV0d2VlbiB0d28gc2Vuc29yc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBDb2xsaXNpb24gPSAoZnVuY3Rpb24gUHJvdG90eXBlKCkge1xuXHR2YXIgaW5zdGFuY2UgPSBmdW5jdGlvbiBpbnN0YW5jZSgpIHt9O1xuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFVzZXMgYm94IGNvbGxpc2lvbiB0byBjaGVjayBpZiB0d28gc2Vuc29ycyBhcmUgdG91Y2hpbmdcblx0ICogQHBhcmFtIHtTZW5vcn0gc2Vuc29yQSAtIEJvdW5kaW5nIHJlY3QgQVxuXHQgKiBAcGFyYW0ge1Nlbm9yfSBzZW5zb3JCIC0gQm91bmRpbmcgcmVjdCBCXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBiYXNlZCBvbiBzZW5zb3Igb3ZlcmxhcFxuXHQgKi9cblx0aW5zdGFuY2UuaXNDb2xsaWRpbmcgPSBmdW5jdGlvbiBpc0NvbGxpZGluZyhzZW5zb3JBLCBzZW5zb3JCKSB7XG5cdFx0cmV0dXJuIChzZW5zb3JBLnggPCBzZW5zb3JCLnggKyBzZW5zb3JCLndpZHRoICYmXG5cdFx0XHRzZW5zb3JBLnggKyBzZW5zb3JCLndpZHRoID4gc2Vuc29yQi54ICYmXG5cdFx0XHRzZW5zb3JBLnkgPCBzZW5zb3JCLnkgKyBzZW5zb3JCLmhlaWdodCAmJlxuXHRcdFx0c2Vuc29yQS5oZWlnaHQgKyBzZW5zb3JBLnkgPiBzZW5zb3JCLnkpO1xuXHR9O1xuXHRyZXR1cm4gaW5zdGFuY2U7XG59KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogRW5naW5lLmpzXG4gKiBUaGlzIGZpbGUgcHJvdmlkZXMgdGhlIGdhbWUgbG9vcCBmdW5jdGlvbmFsaXR5ICh1cGRhdGUgZW50aXRpZXMgYW5kIHJlbmRlciksXG4gKiBkcmF3cyB0aGUgaW5pdGlhbCBnYW1lIGJvYXJkIG9uIHRoZSBzY3JlZW4sIGFuZCB0aGVuIGNhbGxzIHRoZSB1cGRhdGUgYW5kXG4gKiByZW5kZXIgbWV0aG9kcyBvbiB5b3VyIHBsYXllciBhbmQgZW5lbXkgb2JqZWN0cyAoZGVmaW5lZCBpbiB5b3VyIGFwcC5qcykuXG4gKlxuICogQSBnYW1lIGVuZ2luZSB3b3JrcyBieSBkcmF3aW5nIHRoZSBlbnRpcmUgZ2FtZSBzY3JlZW4gb3ZlciBhbmQgb3Zlciwga2luZCBvZlxuICogbGlrZSBhIGZsaXBib29rIHlvdSBtYXkgaGF2ZSBjcmVhdGVkIGFzIGEga2lkLiBXaGVuIHlvdXIgcGxheWVyIG1vdmVzIGFjcm9zc1xuICogdGhlIHNjcmVlbiwgaXQgbWF5IGxvb2sgbGlrZSBqdXN0IHRoYXQgaW1hZ2UvY2hhcmFjdGVyIGlzIG1vdmluZyBvciBiZWluZ1xuICogZHJhd24gYnV0IHRoYXQgaXMgbm90IHRoZSBjYXNlLiBXaGF0J3MgcmVhbGx5IGhhcHBlbmluZyBpcyB0aGUgZW50aXJlIFwic2NlbmVcIlxuICogaXMgYmVpbmcgZHJhd24gb3ZlciBhbmQgb3ZlciwgcHJlc2VudGluZyB0aGUgaWxsdXNpb24gb2YgYW5pbWF0aW9uLlxuICpcbiAqIFRoaXMgZW5naW5lIGlzIGF2YWlsYWJsZSBnbG9iYWxseSB2aWEgdGhlIEVuZ2luZSB2YXJpYWJsZSBhbmQgaXQgYWxzbyBtYWtlc1xuICogdGhlIGNhbnZhcycgY29udGV4dCAoY3R4KSBvYmplY3QgZ2xvYmFsbHkgYXZhaWxhYmxlIHRvIG1ha2Ugd3JpdGluZyBhcHAuanNcbiAqIGEgbGl0dGxlIHNpbXBsZXIgdG8gd29yayB3aXRoLlxuICovXG5cbnZhciBFbmdpbmUgPSAoZnVuY3Rpb24gRW5naW5lKGdsb2JhbCkge1xuXHQvKiBQcmVkZWZpbmUgdGhlIHZhcmlhYmxlcyB3ZSdsbCBiZSB1c2luZyB3aXRoaW4gdGhpcyBzY29wZSxcblx0ICAgKiBjcmVhdGUgdGhlIGNhbnZhcyBlbGVtZW50LCBncmFiIHRoZSAyRCBjb250ZXh0IGZvciB0aGF0IGNhbnZhc1xuXHQgICAqIHNldCB0aGUgY2FudmFzIGVsZW1lbnRzIGhlaWdodC93aWR0aCBhbmQgYWRkIGl0IHRvIHRoZSBET00uXG5cdCAgICovXG5cdHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQsXG5cdHdpbiA9IGdsb2JhbC53aW5kb3csXG5cdGNhbnZhcyA9IGRvYy5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcblx0Y3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyksXG5cdGxhc3RUaW1lLFxuXHRydW5uaW5nID0gZmFsc2UsXG5cdGluc3RhbmNlID0gZnVuY3Rpb24gaW5zdGFuY2UoKXt9O1xuXG5cdGluc3RhbmNlLmVudGl0aWVzID0gW107XG5cdGluc3RhbmNlLndpZHRoID0gY2FudmFzLndpZHRoID0gNTA1O1xuXHRpbnN0YW5jZS5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0ID0gNjA2O1xuXHRjYW52YXMuY2xhc3NOYW1lICs9ICcgY2FudmFzLWdhbWUnO1xuXHRkb2MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGV2ZWwnKVswXS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG5cdC8qIFRoaXMgZnVuY3Rpb24gc2VydmVzIGFzIHRoZSBraWNrb2ZmIHBvaW50IGZvciB0aGUgZ2FtZSBsb29wIGl0c2VsZlxuXHQgICAqIGFuZCBoYW5kbGVzIHByb3Blcmx5IGNhbGxpbmcgdGhlIHVwZGF0ZSBhbmQgcmVuZGVyIG1ldGhvZHMuXG5cdCAgICovXG5cdGZ1bmN0aW9uIG1haW4oKSB7XG5cdFx0aWYgKHJ1bm5pbmcpIHtcblx0XHRcdC8qIEdldCBvdXIgdGltZSBkZWx0YSBpbmZvcm1hdGlvbiB3aGljaCBpcyByZXF1aXJlZCBpZiB5b3VyIGdhbWVcblx0XHRcdCAgICAgICAqIHJlcXVpcmVzIHNtb290aCBhbmltYXRpb24uIEJlY2F1c2UgZXZlcnlvbmUncyBjb21wdXRlciBwcm9jZXNzZXNcblx0XHRcdCAgICAgICAqIGluc3RydWN0aW9ucyBhdCBkaWZmZXJlbnQgc3BlZWRzIHdlIG5lZWQgYSBjb25zdGFudCB2YWx1ZSB0aGF0XG5cdFx0XHQgICAgICAgKiB3b3VsZCBiZSB0aGUgc2FtZSBmb3IgZXZlcnlvbmUgKHJlZ2FyZGxlc3Mgb2YgaG93IGZhc3QgdGhlaXJcblx0XHRcdCAgICAgICAqIGNvbXB1dGVyIGlzKSAtIGh1cnJheSB0aW1lIVxuXHRcdFx0ICAgICAgICovXG5cdFx0XHR2YXIgbm93ID0gRGF0ZS5ub3coKSxcblx0XHRcdGR0ID0gKG5vdyAtIGxhc3RUaW1lKSAvIDEwMDAuMDtcblxuXHRcdFx0LyogQ2FsbCBvdXIgdXBkYXRlL3JlbmRlciBmdW5jdGlvbnMsIHBhc3MgYWxvbmcgdGhlIHRpbWUgZGVsdGEgdG9cblx0XHRcdCAqIG91ciB1cGRhdGUgZnVuY3Rpb24gc2luY2UgaXQgbWF5IGJlIHVzZWQgZm9yIHNtb290aCBhbmltYXRpb24uXG5cdFx0XHQgKi9cblx0XHRcdHVwZGF0ZShkdCk7XG5cdFx0XHRyZW5kZXIoKTtcblxuXHRcdFx0LyogU2V0IG91ciBsYXN0VGltZSB2YXJpYWJsZSB3aGljaCBpcyB1c2VkIHRvIGRldGVybWluZSB0aGUgdGltZSBkZWx0YVxuXHRcdFx0ICogZm9yIHRoZSBuZXh0IHRpbWUgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQuXG5cdFx0XHQgKi9cblx0XHRcdGxhc3RUaW1lID0gbm93O1xuXG5cdFx0XHQvKiBVc2UgdGhlIGJyb3dzZXIncyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZnVuY3Rpb24gdG8gY2FsbCB0aGlzXG5cdFx0XHQgKiBmdW5jdGlvbiBhZ2FpbiBhcyBzb29uIGFzIHRoZSBicm93c2VyIGlzIGFibGUgdG8gZHJhdyBhbm90aGVyIGZyYW1lLlxuXHRcdFx0ICovXG5cdFx0XHR3aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1haW4pO1xuXHRcdH1cblx0fVxuXG5cdC8qIFRoaXMgZnVuY3Rpb24gZG9lcyBzb21lIGluaXRpYWwgc2V0dXAgdGhhdCBzaG91bGQgb25seSBvY2N1ciBvbmNlLFxuXHQgICAqIHBhcnRpY3VsYXJseSBzZXR0aW5nIHRoZSBsYXN0VGltZSB2YXJpYWJsZSB0aGF0IGlzIHJlcXVpcmVkIGZvciB0aGVcblx0ICAgKiBnYW1lIGxvb3AuXG5cdCAgICovXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cdFx0aW5zdGFuY2UucmVzZXQoKTtcblx0XHRydW5uaW5nID0gdHJ1ZTtcblx0XHRsYXN0VGltZSA9IERhdGUubm93KCk7XG5cdFx0bWFpbigpO1xuXHR9XG5cblx0LyogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgbWFpbiAob3VyIGdhbWUgbG9vcCkgYW5kIGl0c2VsZiBjYWxscyBhbGxcblx0ICAgKiBvZiB0aGUgZnVuY3Rpb25zIHdoaWNoIG1heSBuZWVkIHRvIHVwZGF0ZSBlbnRpdHkncyBkYXRhLiBCYXNlZCBvbiBob3dcblx0ICAgKiB5b3UgaW1wbGVtZW50IHlvdXIgY29sbGlzaW9uIGRldGVjdGlvbiAod2hlbiB0d28gZW50aXRpZXMgb2NjdXB5IHRoZVxuXHQgICAqIHNhbWUgc3BhY2UsIGZvciBpbnN0YW5jZSB3aGVuIHlvdXIgY2hhcmFjdGVyIHNob3VsZCBkaWUpLCB5b3UgbWF5IGZpbmRcblx0ICAgKiB0aGUgbmVlZCB0byBhZGQgYW4gYWRkaXRpb25hbCBmdW5jdGlvbiBjYWxsIGhlcmUuIEZvciBub3csIHdlJ3ZlIGxlZnRcblx0ICAgKiBpdCBjb21tZW50ZWQgb3V0IC0geW91IG1heSBvciBtYXkgbm90IHdhbnQgdG8gaW1wbGVtZW50IHRoaXNcblx0ICAgKiBmdW5jdGlvbmFsaXR5IHRoaXMgd2F5ICh5b3UgY291bGQganVzdCBpbXBsZW1lbnQgY29sbGlzaW9uIGRldGVjdGlvblxuXHQgICAqIG9uIHRoZSBlbnRpdGllcyB0aGVtc2VsdmVzIHdpdGhpbiB5b3VyIGFwcC5qcyBmaWxlKS5cblx0ICAgKi9cblx0ZnVuY3Rpb24gdXBkYXRlKGR0KSB7XG5cdFx0dXBkYXRlRW50aXRpZXMoZHQpO1xuXHRcdC8vIGNoZWNrQ29sbGlzaW9ucygpO1xuXHR9XG5cblx0LyogVGhpcyBpcyBjYWxsZWQgYnkgdGhlIHVwZGF0ZSBmdW5jdGlvbiAgYW5kIGxvb3BzIHRocm91Z2ggYWxsIG9mIHRoZVxuXHQgICAqIG9iamVjdHMgd2l0aGluIHlvdXIgaW5zdGFuY2UuZW50aXRpZXMgYXJyYXkgYXMgZGVmaW5lZCBpbiBhcHAuanMgYW5kIGNhbGxzXG5cdCAgICogdGhlaXIgdXBkYXRlKCkgbWV0aG9kcy4gSXQgd2lsbCB0aGVuIGNhbGwgdGhlIHVwZGF0ZSBmdW5jdGlvbiBmb3IgeW91clxuXHQgICAqIHBsYXllciBvYmplY3QuIFRoZXNlIHVwZGF0ZSBtZXRob2RzIHNob3VsZCBmb2N1cyBwdXJlbHkgb24gdXBkYXRpbmdcblx0ICAgKiB0aGUgZGF0YS9wcm9wZXJ0aWVzIHJlbGF0ZWQgdG8gIHRoZSBvYmplY3QuIERvIHlvdXIgZHJhd2luZyBpbiB5b3VyXG5cdCAgICogcmVuZGVyIG1ldGhvZHMuXG5cdCAgICovXG5cdGZ1bmN0aW9uIHVwZGF0ZUVudGl0aWVzKGR0KSB7XG5cdFx0aW5zdGFuY2UuZW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbiBFYWNoRW5lbXkoZW5lbXkpIHtcblx0XHRcdGVuZW15LnVwZGF0ZShkdCk7XG5cdFx0fSk7XG5cdFx0cGxheWVyLnVwZGF0ZShkdCk7XG5cdH1cblxuXHQvKiBUaGlzIGZ1bmN0aW9uIGluaXRpYWxseSBkcmF3cyB0aGUgXCJnYW1lIGxldmVsXCIsIGl0IHdpbGwgdGhlbiBjYWxsXG5cdCAgICogdGhlIHJlbmRlckVudGl0aWVzIGZ1bmN0aW9uLiBSZW1lbWJlciwgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgZXZlcnlcblx0ICAgKiBnYW1lIHRpY2sgKG9yIGxvb3Agb2YgdGhlIGdhbWUgZW5naW5lKSBiZWNhdXNlIHRoYXQncyBob3cgZ2FtZXMgd29yayAtXG5cdCAgICogdGhleSBhcmUgZmxpcGJvb2tzIGNyZWF0aW5nIHRoZSBpbGx1c2lvbiBvZiBhbmltYXRpb24gYnV0IGluIHJlYWxpdHlcblx0ICAgKiB0aGV5IGFyZSBqdXN0IGRyYXdpbmcgdGhlIGVudGlyZSBzY3JlZW4gb3ZlciBhbmQgb3Zlci5cblx0ICAgKi9cblx0ZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdC8qIFRoaXMgYXJyYXkgaG9sZHMgdGhlIHJlbGF0aXZlIFVSTCB0byB0aGUgaW1hZ2UgdXNlZFxuXHRcdCAgICAgKiBmb3IgdGhhdCBwYXJ0aWN1bGFyIHJvdyBvZiB0aGUgZ2FtZSBsZXZlbC5cblx0XHQgICAgICovXG5cdFx0dmFyIHJvd0ltYWdlcyA9IFtcblx0XHQnaW1hZ2VzL3dhdGVyLWJsb2NrLnBuZycsICAgLy8gVG9wIHJvdyBpcyB3YXRlclxuXHRcdCdpbWFnZXMvc3RvbmUtYmxvY2sucG5nJywgICAvLyBSb3cgMSBvZiAzIG9mIHN0b25lXG5cdFx0J2ltYWdlcy9zdG9uZS1ibG9jay5wbmcnLCAgIC8vIFJvdyAyIG9mIDMgb2Ygc3RvbmVcblx0XHQnaW1hZ2VzL3N0b25lLWJsb2NrLnBuZycsICAgLy8gUm93IDMgb2YgMyBvZiBzdG9uZVxuXHRcdCdpbWFnZXMvZ3Jhc3MtYmxvY2sucG5nJywgICAvLyBSb3cgMSBvZiAyIG9mIGdyYXNzXG5cdFx0J2ltYWdlcy9ncmFzcy1ibG9jay5wbmcnICAgIC8vIFJvdyAyIG9mIDIgb2YgZ3Jhc3Ncblx0XHRdLFxuXHRcdG51bVJvd3MgPSA2LFxuXHRcdG51bUNvbHMgPSA1LFxuXHRcdHJvdywgY29sO1xuXG5cdFx0Ly8tLSBDbGVhciB0aGUgZW50aXJlIGNhbnZhc1xuXHRcdGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuXHRcdC8qIExvb3AgdGhyb3VnaCB0aGUgbnVtYmVyIG9mIHJvd3MgYW5kIGNvbHVtbnMgd2UndmUgZGVmaW5lZCBhYm92ZVxuXHRcdCAgICAgKiBhbmQsIHVzaW5nIHRoZSByb3dJbWFnZXMgYXJyYXksIGRyYXcgdGhlIGNvcnJlY3QgaW1hZ2UgZm9yIHRoYXRcblx0XHQgICAgICogcG9ydGlvbiBvZiB0aGUgXCJncmlkXCJcblx0XHQgICAgICovXG5cdFx0Zm9yIChyb3cgPSAwOyByb3cgPCBudW1Sb3dzOyByb3crKykge1xuXHRcdFx0Zm9yIChjb2wgPSAwOyBjb2wgPCBudW1Db2xzOyBjb2wrKykge1xuXHRcdFx0XHQvKiBUaGUgZHJhd0ltYWdlIGZ1bmN0aW9uIG9mIHRoZSBjYW52YXMnIGNvbnRleHQgZWxlbWVudFxuXHRcdFx0XHQgICAgICAgICAqIHJlcXVpcmVzIDMgcGFyYW1ldGVyczogdGhlIGltYWdlIHRvIGRyYXcsIHRoZSB4IGNvb3JkaW5hdGVcblx0XHRcdFx0ICAgICAgICAgKiB0byBzdGFydCBkcmF3aW5nIGFuZCB0aGUgeSBjb29yZGluYXRlIHRvIHN0YXJ0IGRyYXdpbmcuXG5cdFx0XHRcdCAgICAgICAgICogV2UncmUgdXNpbmcgb3VyIFJlc291cmNlcyBoZWxwZXJzIHRvIHJlZmVyIHRvIG91ciBpbWFnZXNcblx0XHRcdFx0ICAgICAgICAgKiBzbyB0aGF0IHdlIGdldCB0aGUgYmVuZWZpdHMgb2YgY2FjaGluZyB0aGVzZSBpbWFnZXMsIHNpbmNlXG5cdFx0XHRcdCAgICAgICAgICogd2UncmUgdXNpbmcgdGhlbSBvdmVyIGFuZCBvdmVyLlxuXHRcdFx0XHQgICAgICAgICAqL1xuXHRcdFx0XHRjdHguZHJhd0ltYWdlKFJlc291cmNlcy5nZXQocm93SW1hZ2VzW3Jvd10pLCBjb2wgKiAxMDEsIHJvdyAqIDgzKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZW5kZXJFbnRpdGllcygpO1xuXHR9XG5cblx0LyogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGhlIHJlbmRlciBmdW5jdGlvbiBhbmQgaXMgY2FsbGVkIG9uIGVhY2ggZ2FtZVxuXHQgICAqIHRpY2suIEl0J3MgcHVycG9zZSBpcyB0byB0aGVuIGNhbGwgdGhlIHJlbmRlciBmdW5jdGlvbnMgeW91IGhhdmUgZGVmaW5lZFxuXHQgICAqIG9uIHlvdXIgZW5lbXkgYW5kIHBsYXllciBlbnRpdGllcyB3aXRoaW4gYXBwLmpzXG5cdCAgICovXG5cdGZ1bmN0aW9uIHJlbmRlckVudGl0aWVzKCkge1xuXHRcdC8qIExvb3AgdGhyb3VnaCBhbGwgb2YgdGhlIG9iamVjdHMgd2l0aGluIHRoZSBpbnN0YW5jZS5lbnRpdGllcyBhcnJheSBhbmQgY2FsbFxuXHRcdCAgICAgKiB0aGUgcmVuZGVyIGZ1bmN0aW9uIHlvdSBoYXZlIGRlZmluZWQuXG5cdFx0ICAgICAqL1xuXHRcdGluc3RhbmNlLmVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24oZW5lbXkpIHtcblx0XHRcdGVuZW15LnJlbmRlcihjdHgpO1xuXHRcdH0pO1xuXG5cdFx0cGxheWVyLnJlbmRlcihjdHgpO1xuXHR9XG5cblx0LyogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdGhpbmcgYnV0IGl0IGNvdWxkIGhhdmUgYmVlbiBhIGdvb2QgcGxhY2UgdG9cblx0ICAgKiBoYW5kbGUgZ2FtZSByZXNldCBzdGF0ZXMgLSBtYXliZSBhIG5ldyBnYW1lIG1lbnUgb3IgYSBnYW1lIG92ZXIgc2NyZWVuXG5cdCAgICogdGhvc2Ugc29ydHMgb2YgdGhpbmdzLiBJdCdzIG9ubHkgY2FsbGVkIG9uY2UgYnkgdGhlIGluaXQoKSBtZXRob2QuXG5cdCAgICovXG5cdGluc3RhbmNlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG5cdFx0cnVubmluZyA9IGZhbHNlO1xuXHR9O1xuXG5cdGluc3RhbmNlLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoKSB7XG5cdFx0cnVubmluZyA9IGZhbHNlO1xuXHR9O1xuXG5cdGluc3RhbmNlLnByZWxvYWQgPSBmdW5jdGlvbiBwcmVsb2FkKCkge1xuXHRcdC8qIEdvIGFoZWFkIGFuZCBsb2FkIGFsbCBvZiB0aGUgaW1hZ2VzIHdlIGtub3cgd2UncmUgZ29pbmcgdG8gbmVlZCB0b1xuXHRcdCAgICAgKiBkcmF3IG91ciBnYW1lIGxldmVsLiBUaGVuIHNldCBpbml0IGFzIHRoZSBjYWxsYmFjayBtZXRob2QsIHNvIHRoYXQgd2hlblxuXHRcdCAgICAgKiBhbGwgb2YgdGhlc2UgaW1hZ2VzIGFyZSBwcm9wZXJseSBsb2FkZWQgb3VyIGdhbWUgd2lsbCBzdGFydC5cblx0XHQgICAgICovXG5cdFx0UmVzb3VyY2VzLmxvYWQobG9jYXRpb25zKCdpbWFnZXMvJywgJ3BuZycpKTtcblxuXHRcdGZ1bmN0aW9uIGxvY2F0aW9ucyhmb2xkZXIsIGZvcm1hdCkge1xuXHRcdFx0dmFyIHJlc291cmNlcyA9IFtcblx0XHRcdCdjaGFyLWJveScsXG5cdFx0XHQnY2hhci1jYXQtZ2lybCcsXG5cdFx0XHQnY2hhci1ob3JuLWdpcmwnLFxuXHRcdFx0J2NoYXItcGluay1naXJsJyxcblx0XHRcdCdjaGFyLXByaW5jZXNzLWdpcmwnLFxuXHRcdFx0J2VuZW15LWJ1ZycsXG5cdFx0XHQnR2VtIEJsdWUnLFxuXHRcdFx0J0dlbSBHcmVlbicsXG5cdFx0XHQnR2VtIE9yYW5nZScsXG5cdFx0XHQnZ3Jhc3MtYmxvY2snLFxuXHRcdFx0J0hlYXJ0Jyxcblx0XHRcdCdLZXknLFxuXHRcdFx0J1JvY2snLFxuXHRcdFx0J1NlbGVjdG9yJyxcblx0XHRcdCdTdGFyJyxcblx0XHRcdCdzdG9uZS1ibG9jaycsXG5cdFx0XHQnd2F0ZXItYmxvY2snXG5cdFx0XHRdO1xuXHRcdFx0cmV0dXJuIHJlc291cmNlcy5tYXAoZnVuY3Rpb24oZWwpIHtcblx0XHRcdFx0cmV0dXJuIGZvbGRlciArIGVsICsgJy4nICsgZm9ybWF0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKFJlc291cmNlcy5pc1JlYWR5KCkpIHtcblx0XHRcdGluaXQoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRSZXNvdXJjZXMub25SZWFkeShpbml0KTtcblx0XHR9XG5cblx0fTtcblxuXHQvKiBBc3NpZ24gdGhlIGNhbnZhcycgY29udGV4dCBvYmplY3QgdG8gdGhlIGdsb2JhbCB2YXJpYWJsZSAodGhlIHdpbmRvd1xuXHQgICAqIG9iamVjdCB3aGVuIHJ1biBpbiBhIGJyb3dzZXIpIHNvIHRoYXQgZGV2ZWxvcGVyJ3MgY2FuIHVzZSBpdCBtb3JlIGVhc2lseVxuXHQgICAqIGZyb20gd2l0aGluIHRoZWlyIGFwcC5qcyBmaWxlcy5cblx0ICAgKi9cblx0Z2xvYmFsLmN0eCA9IGN0eDtcblxuXHRyZXR1cm4gaW5zdGFuY2U7XG59KSh0aGlzKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuKiBAZGVzY3JpcHRpb24gTW9kZWwgU2luZ2xldG9uIHVzZWQgZm9yIHN0b3Jpbmcgc3RhdGUgZGF0YVxuKiBAY29uc3RydWN0b3JcbiovXG52YXIgTW9kZWwgPSAoZnVuY3Rpb24gTW9kZWwoKSB7XG5cdHZhciBkYXRhID0ge307XG5cdHZhciBpbnN0YW5jZSA9IGZ1bmN0aW9uIGluc3RhbmNlKCkge307XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBTZXRzIGEgdmFsdWUgdG8gYSBrZXlcblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBwcm9wZXJ0eSB0byBzdG9yZSB0aGUgdmFsdWUgdW5kZXJcblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBrZXlcblx0ICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSBvZiB0aGUga2V5XG5cdCAqL1xuXHRpbnN0YW5jZS5zZXQgPSBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuXHRcdGRhdGFba2V5XSA9IHZhbHVlO1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIHZhbHVlIHNldCB0byB0aGUga2V5XG5cdCAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgb2YgdGhlIGtleVxuXHQgKi9cblx0aW5zdGFuY2UuZ2V0ID0gZnVuY3Rpb24gZ2V0KGtleSkge1xuXHRcdHJldHVybiBkYXRhW2tleV07XG5cdH07XG5cblx0cmV0dXJuIGluc3RhbmNlO1xufSkoKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuKiBAZGVzY3JpcHRpb24gQSBUaW1lciBjbGFzcyB0aGF0IHVwZGF0ZXMgbWFudWFsbHkgdXNpbmcgd2l0aCBkZWx0YSB0aW1lXG4qIEBjb25zdHJ1Y3RvclxuKi9cbnZhciBUaW1lciA9IGZ1bmN0aW9uIFRpbWVyKGludGVydmFscywgZGVsYXkpIHtcblx0dGhpcy5pbnRlcnZhbHMgPSBpbnRlcnZhbHM7XG5cdHRoaXMuZGVsYXkgPSBkZWxheTtcblx0dGhpcy5ydW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubGlzdGVuZXJzID0ge307XG5cdHRoaXMudGltZSA9IDA7XG5cdHRoaXMubGFwcyA9IDA7XG59O1xuXG4oZnVuY3Rpb24gUHJvdG90eXBlKCkge1xuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJlc2V0cyB0aGUgdGltZXIgYW5kIGZsYWdzIGl0IGFzIHJ1bm5pbmdcblx0ICovXG5cdHRoaXMuc3RhcnQgPSBmdW5jdGlvbiBzdGFydCgpIHtcblx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXHRcdHRoaXMudGltZSA9IHRoaXMuZGVsYXk7XG5cdFx0dGhpcy5sYXBzID0gdGhpcy5pbnRlcnZhbHM7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBVc2VzIHRoZSBkZWx0YSB0aW1lIHRvIG1hbnVhbGx5IHVwZGF0ZSB0aGUgdGltZXJcblx0ICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhIC0gVGltZSBzaW5jZSBsYXN0IHVwZGF0ZVxuXHQgKi9cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGVsdGEpIHtcblx0XHRpZiAodGhpcy5ydW5uaW5nKSB7XG5cdFx0XHR0aGlzLnRpbWUgPSBNYXRoLm1heCgwLCB0aGlzLnRpbWUgLSBkZWx0YSk7XG5cdFx0XHRpZiAodGhpcy50aW1lID09PSAwKSB7XG5cdFx0XHRcdHRoaXMubGFwcyAtPSAxO1xuXHRcdFx0XHRpZiAodGhpcy5sYXBzIDw9IDApIHtcblx0XHRcdFx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoKCdDT01QTEVURScpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGhpcy5kZWxheTtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoKCdVUERBVEUnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIEFkZHMgYSBsaXN0ZW5lciBmb3IgdGhlIHNwZWNpZmllZCBldmVudFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgdG8gbGlzdGVuIGZvclxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBjYWxsYmFjayBmdW5jdGlvblxuXHQgKi9cblx0dGhpcy5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuXHRcdGlmICghdGhpcy5saXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG5cdFx0XHR0aGlzLmxpc3RlbmVyc1tldmVudF0gPSBbXTtcblx0XHR9XG5cdFx0dGhpcy5saXN0ZW5lcnNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gQXR0ZW1wdHMgdG8gaW52b2tlIGEgY2FsbGJhY2sgbWV0aG9kIGZvciB0aGUgZ2l2ZW4gZXZlbnRcblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gVGhlIGV2ZW50IHRvIGRpc3BhdGNoXG5cdCAqL1xuXHR0aGlzLmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goZXZlbnQpIHtcblx0XHR2YXIgaTtcblx0XHR2YXIgbGlzdDtcblx0XHRpZiAodGhpcy5saXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG5cdFx0XHRsaXN0ID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bGlzdFtpXSh0aGlzKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59KS5jYWxsKFRpbWVyLnByb3RvdHlwZSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKipcbiogQGRlc2NyaXB0aW9uIEdyaWQgU2luZ2xldG9uIHVzZWQgZm9yIHBvc2l0aW9uaW5nIHRoaW5ncyBvbiBhIEdyaWRcbiogQGNvbnN0cnVjdG9yXG4qL1xudmFyIEdyaWQgPSAoZnVuY3Rpb24gR3JpZCgpIHtcblx0dmFyIGluc3RhbmNlID0gZnVuY3Rpb24gaW5zdGFuY2UoKSB7fTtcblxuXHRpbnN0YW5jZS5jZWxsV2lkdGggPSAxMDE7XG5cdGluc3RhbmNlLmNlbGxIZWlnaHQgPSA4Mztcblx0aW5zdGFuY2UuY29sdW1ucyA9IDU7XG5cdGluc3RhbmNlLnJvd3MgPSA2O1xuXHRpbnN0YW5jZS5vZmZzZXRZID0gNTA7XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBEZXRlcm1pbmVzIHRoZSB4IGxvY2F0aW9uIGJhc2VkIG9uIHRoZSBjb2x1bW5cblx0ICogQHBhcmFtIHtpbnR9IGNvbHVtbiAtIFRoZSBjb2x1bW5cblx0ICogQHJldHVybnMge251bWJlcn0gVGhlIHNjcmVlbiB4IHBvc2l0aW9uXG5cdCAqL1xuXHRpbnN0YW5jZS5nZXRYRnJvbUNvbHVtbiA9IGZ1bmN0aW9uIGdldFhGcm9tQ29sdW1uKGNvbHVtbikge1xuXHRcdHZhciBjb2wgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihjb2x1bW4sIGluc3RhbmNlLmNvbHVtbnMgLSAxKSk7XG5cdFx0cmV0dXJuIGNvbCAqIGluc3RhbmNlLmNlbGxXaWR0aDtcblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIERldGVybWluZXMgdGhlIHkgbG9jYXRpb24gYmFzZWQgb24gdGhlIHJvd1xuXHQgKiBAcGFyYW0ge2ludH0gcm93IC0gVGhlIHJvd1xuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgc2NyZWVuIHkgcG9zaXRpb25cblx0ICovXG5cdGluc3RhbmNlLmdldFlGcm9tUm93ID0gZnVuY3Rpb24gZ2V0WUZyb21Sb3cocm93KSB7XG5cdFx0cm93ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocm93LCBpbnN0YW5jZS5yb3dzIC0gMSkpO1xuXHRcdHJldHVybiBpbnN0YW5jZS5vZmZzZXRZICsgcm93ICogaW5zdGFuY2UuY2VsbEhlaWdodDtcblx0fTtcblxuXHRyZXR1cm4gaW5zdGFuY2U7XG59KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4qIEBkZXNjcmlwdGlvbiBIYW5kbGVzIGxldmVsIGNyZWF0aW9uXG4qIEBjb25zdHJ1Y3RvclxuKi9cbnZhciBMZXZlbCA9IGZ1bmN0aW9uIExldmVsKCkge1xuXHR0aGlzLnJlc2V0KCk7XG59O1xuXG4oZnVuY3Rpb24gUHJvdG90eXBlKCkge1xuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJlc2V0J3MgbGV2ZWwgdmFyaWFibGVzIHRvIG9yaWdpbmFsIHZhbHVlc1xuXHQgKi9cblx0dGhpcy5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuXHRcdHRoaXMubGV2ZWwgPSBNb2RlbC5zZXQoJ2xldmVsJywgMCk7XG5cdFx0dGhpcy5sYXN0TGV2ZWwgPSA3O1xuXHRcdE1vZGVsLnNldCgnbGV2ZWxfdG90YWxfdGltZScsIDE1KTtcblx0XHRNb2RlbC5zZXQoJ2xldmVsX2NvbXBsZXRlJywgZmFsc2UpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gQWR2YW5jZXMgdGhlIGN1cnJlbnQgbGV2ZWwgYnkgb25lXG5cdCAqL1xuXHR0aGlzLm5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuXHRcdHRoaXMubGV2ZWwgPSBNb2RlbC5zZXQoJ2xldmVsJywgdGhpcy5sZXZlbCArIDEpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gQ3JlYXRlcyBhbGwgdGhlIGVudGl0aWVzIGZvciB0aGUgY3VycmVudCBsZXZlbFxuXHQgKi9cblx0dGhpcy5hZGRFbnRpdGllcyA9IGZ1bmN0aW9uIGFkZEVudGl0aWVzKCkge1xuXHRcdHZhciBkYXRhID0gdGhpcy5sZXZlbERhdGEoKTtcblx0XHR2YXIgaTtcblx0XHRFbmdpbmUuZW50aXRpZXMgPSBbXTtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAoZGF0YVtpXS5oYXNPd25Qcm9wZXJ0eSgndCcpKSB7XG5cdFx0XHRcdGlmIChkYXRhW2ldLnQgPT09ICdrZXknKSB7XG5cdFx0XHRcdFx0RW5naW5lLmVudGl0aWVzLnB1c2gobmV3IEtleShkYXRhW2ldLnIsIGRhdGFbaV0uYykpO1xuXHRcdFx0XHR9ZWxzZSBpZiAoZGF0YVtpXS50ID09PSAnd2F0ZXInKSB7XG5cdFx0XHRcdFx0RW5naW5lLmVudGl0aWVzLnB1c2gobmV3IFdhdGVyKGRhdGFbaV0uciwgZGF0YVtpXS5jKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0RW5naW5lLmVudGl0aWVzLnB1c2gobmV3IEVuZW15KGRhdGFbaV0uciwgZGF0YVtpXS5jLCBkYXRhW2ldLnMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBKU09OIGVudGl0aWVzIGZvciB0aGUgZ2l2ZW4gbGV2ZWxcblx0ICogQHJldHVybnMge2FycmF5fVxuXHQgKi9cblx0dGhpcy5sZXZlbERhdGEgPSBmdW5jdGlvbiBsZXZlbERhdGEoKSB7XG5cdFx0Ly8gIEZvcm1hdHRlZCBzbyBpdCdzIGVhc2llciB0byBzZWUgdGhlIGxldmVscyAobm90IGZvbGxvd2luZyBVZGFjaXR5IEpTIHN0YW5kYXJkcylcblx0XHQvLyAganNjczpkaXNhYmxlXG5cdFx0aWYgKHRoaXMubGV2ZWwgPT09IDApIHtcblx0XHRcdHJldHVybiBbXG5cdFx0XHR7cjogMCwgYzogMCwgdDogJ3dhdGVyJ30sIHtyOiAwLCBjOiAxLCB0OiAnd2F0ZXInfSwge3I6IDAsIGM6IDIsIHQ6ICdrZXknfSwge3I6IDAsIGM6IDMsIHQ6ICd3YXRlcid9LCB7cjogMCwgYzogNCwgdDogJ3dhdGVyJ31cblx0XHRcdF07XG5cdFx0fWVsc2UgaWYgKHRoaXMubGV2ZWwgPT09IDEpIHtcblx0XHRcdHJldHVybiBbXG5cdFx0XHR7cjogMywgYzogMCwgczogMjAwfSwge3I6IDMsIGM6IDIsIHM6IDIwMH0sIHtyOiAzLCBjOiA0LCBzOiAyMDB9LFxuXHRcdFx0e3I6IDAsIGM6IDAsIHQ6ICd3YXRlcid9LCB7cjogMCwgYzogMSwgdDogJ3dhdGVyJ30sIHtyOiAwLCBjOiAyLCB0OiAna2V5J30sIHtyOiAwLCBjOiAzLCB0OiAnd2F0ZXInfSwge3I6IDAsIGM6IDQsIHQ6ICd3YXRlcid9XG5cdFx0XHRdO1xuXHRcdH1lbHNlIGlmICh0aGlzLmxldmVsID09PSAyKSB7XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0e3I6IDEsIGM6IDAsIHM6IC0xMDB9LCB7cjogMSwgYzogMSwgczogLTEwMH0sIHtyOiAxLCBjOiAzLCBzOiAtMTAwfSwge3I6IDEsIGM6IDQsIHM6IC0xMDB9LFxuXHRcdFx0e3I6IDAsIGM6IDAsIHQ6ICd3YXRlcid9LCB7cjogMCwgYzogMSwgdDogJ3dhdGVyJ30sIHtyOiAwLCBjOiAyLCB0OiAna2V5J30sIHtyOiAwLCBjOiAzLCB0OiAnd2F0ZXInfSwge3I6IDAsIGM6IDQsIHQ6ICd3YXRlcid9XG5cdFx0XHRdO1xuXHRcdH1lbHNlIGlmICh0aGlzLmxldmVsID09PSAzKSB7XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0e3I6IDIsIGM6IDAsIHM6IDUwMH0sIHtyOiAyLCBjOiA0LCBzOiA2MDB9LFxuXHRcdFx0e3I6IDAsIGM6IDAsIHQ6ICd3YXRlcid9LCB7cjogMCwgYzogMSwgdDogJ3dhdGVyJ30sIHtyOiAwLCBjOiAyLCB0OiAna2V5J30sIHtyOiAwLCBjOiAzLCB0OiAnd2F0ZXInfSwge3I6IDAsIGM6IDQsIHQ6ICd3YXRlcid9XG5cdFx0XHRdO1xuXHRcdH1lbHNlIGlmICh0aGlzLmxldmVsID09PSA0KSB7XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0e3I6IDEsIGM6IDAsIHM6IC0xMDB9LCB7cjogMSwgYzogMSwgczogLTEwMH0sIHtyOiAxLCBjOiAzLCBzOiAtMTAwfSwge3I6IDEsIGM6IDQsIHM6IC0xMDB9LFxuXHRcdFx0e3I6IDMsIGM6IDAsIHM6IDIwMH0sIHtyOiAzLCBjOiAyLCBzOiAyMDB9LCB7cjogMywgYzogNCwgczogMjAwfSxcblx0XHRcdHtyOiAwLCBjOiAwLCB0OiAnd2F0ZXInfSwge3I6IDAsIGM6IDEsIHQ6ICd3YXRlcid9LCB7cjogMCwgYzogMiwgdDogJ2tleSd9LCB7cjogMCwgYzogMywgdDogJ3dhdGVyJ30sIHtyOiAwLCBjOiA0LCB0OiAnd2F0ZXInfVxuXHRcdFx0XTtcblx0XHR9ZWxzZSBpZiAodGhpcy5sZXZlbCA9PT0gNSkge1xuXHRcdFx0cmV0dXJuIFtcblx0XHRcdHtyOiAyLCBjOiAwLCBzOiA1MDB9LCB7cjogMiwgYzogNCwgczogNjAwfSxcblx0XHRcdHtyOiAzLCBjOiAwLCBzOiAyMDB9LCB7cjogMywgYzogMiwgczogMjAwfSwge3I6IDMsIGM6IDQsIHM6IDIwMH0sXG5cdFx0XHR7cjogMCwgYzogMCwgdDogJ3dhdGVyJ30sIHtyOiAwLCBjOiAxLCB0OiAnd2F0ZXInfSwge3I6IDAsIGM6IDIsIHQ6ICdrZXknfSwge3I6IDAsIGM6IDMsIHQ6ICd3YXRlcid9LCB7cjogMCwgYzogNCwgdDogJ3dhdGVyJ31cblx0XHRcdF07XG5cdFx0fWVsc2UgaWYgKHRoaXMubGV2ZWwgPT09IDYpIHtcblx0XHRcdHJldHVybiBbXG5cdFx0XHR7cjogMSwgYzogMCwgczogLTEwMH0sIHtyOiAxLCBjOiAxLCBzOiAtMTAwfSwge3I6IDEsIGM6IDMsIHM6IC0xMDB9LCB7cjogMSwgYzogNCwgczogLTEwMH0sXG5cdFx0XHR7cjogMiwgYzogMCwgczogNTAwfSwge3I6IDIsIGM6IDQsIHM6IDYwMH0sXG5cdFx0XHR7cjogMCwgYzogMCwgdDogJ3dhdGVyJ30sIHtyOiAwLCBjOiAxLCB0OiAnd2F0ZXInfSwge3I6IDAsIGM6IDIsIHQ6ICdrZXknfSwge3I6IDAsIGM6IDMsIHQ6ICd3YXRlcid9LCB7cjogMCwgYzogNCwgdDogJ3dhdGVyJ31cblx0XHRcdF07XG5cdFx0fVxuXHRcdC8vICBqc2NzOmRpc2FibGVcblx0XHRyZXR1cm4gW1xuXHRcdHtyOiAxLCBjOiAwLCBzOiAtMTAwfSwge3I6IDEsIGM6IDEsIHM6IC0xMDB9LCB7cjogMSwgYzogMywgczogLTEwMH0sIHtyOiAxLCBjOiA0LCBzOiAtMTAwfSxcblx0XHR7cjogMiwgYzogMCwgczogNTAwfSwge3I6IDIsIGM6IDQsIHM6IDYwMH0sXG5cdFx0e3I6IDMsIGM6IDAsIHM6IDIwMH0sIHtyOiAzLCBjOiAyLCBzOiAyMDB9LCB7cjogMywgYzogNCwgczogMjAwfSxcblx0XHR7cjogMCwgYzogMCwgdDogJ3dhdGVyJ30sIHtyOiAwLCBjOiAxLCB0OiAnd2F0ZXInfSwge3I6IDAsIGM6IDIsIHQ6ICdrZXknfSwge3I6IDAsIGM6IDMsIHQ6ICd3YXRlcid9LCB7cjogMCwgYzogNCwgdDogJ3dhdGVyJ31cblx0XHRdO1xuXHR9O1xufSkuY2FsbChMZXZlbC5wcm90b3R5cGUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gU2NlbmUgU2luZ2xldG9uIHVzZWQgZm9yIGNoYW5naW5nIHRoZSBzY2VuZSB2aWV3XG4gKiBAY29uc3RydWN0b3JcbiAqL1xudmFyIFNjZW5lID0gKGZ1bmN0aW9uIFNjZW5lKCkge1xuXHR2YXIgaW5zdGFuY2UgPSBmdW5jdGlvbiBpbnN0YW5jZSgpIHt9O1xuXHR2YXIgbGV2ZWwgPSBuZXcgTGV2ZWwoKTtcblx0dmFyIG9uQ2hhcmFjdGVyQ2xpY2tlZCA9IGZ1bmN0aW9uIG9uQ2hhcmFjdGVyQ2xpY2tlZChlbCkge1xuXHRcdHZhciBzID0gZWwudGFyZ2V0LnNyYztcblx0XHRwbGF5ZXIuc3ByaXRlID0gcy5zbGljZShzLmluZGV4T2YoJy9pbWFnZXMvJykgKyAxLCBzLmxlbmd0aCk7XG5cblx0XHRFbC5yZW1vdmVDbGFzcyhFbC5nZXRFbGVtZW50cygnc2VsZWN0ZWQtY2hhcicpLCAnc2VsZWN0ZWQtY2hhcicpO1xuXHRcdEVsLmFkZENsYXNzKGVsLnRhcmdldCwgJ3NlbGVjdGVkLWNoYXInKTtcblx0fTtcblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBTaG93cyB0aGUgQ2hhcmFjdGVyIHNlbGVjdGlvbiBzY2VuZVxuXHQgKi9cblx0aW5zdGFuY2Uuc3RhcnRNZW51ID0gZnVuY3Rpb24gc3RhcnRNZW51KCkge1xuXHRcdHZhciBjaGFyYWN0ZXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2hhcicpO1xuXHRcdHZhciBpO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGNoYXJhY3RlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNoYXJhY3RlcnNbaV0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNoYXJhY3RlckNsaWNrZWQpO1xuXHRcdH1cblxuXHRcdEVuZ2luZS5yZXNldCgpO1xuXG5cdFx0RWwuc2hvdygnY2hhcl9zZWxlY3QnKTtcblx0XHRFbC5oaWRlKCdsZXZlbCcpO1xuXHRcdEVsLmhpZGUoJ2dhbWVvdmVyJyk7XG5cdFx0RWwuaGlkZSgnZ2FtZXdpbicpO1xuXHRcdHNjZW5lID0gJ2NoYXJfc2VsZWN0Jztcblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFNob3dzIHRoZSBHYW1lIHNjZW5lXG5cdCAqL1xuXHRpbnN0YW5jZS5zdGFydEdhbWUgPSBmdW5jdGlvbiBzdGFydEdhbWUocmVzZXQpIHtcblx0XHRyZXNldCA9IHJlc2V0IHx8IGZhbHNlO1xuXG5cdFx0aWYgKHJlc2V0KSB7XG5cdFx0XHRsZXZlbC5yZXNldCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRNb2RlbC5zZXQoJ2xldmVsX2NvbXBsZXRlJywgZmFsc2UpO1xuXHRcdH1cblxuXHRcdEVuZ2luZS5wcmVsb2FkKCk7XG5cdFx0cGxheWVyLnJlc3Bhd24oKTtcblxuXHRcdGxldmVsLmFkZEVudGl0aWVzKCk7XG5cdFx0RW5naW5lLmVudGl0aWVzLnB1c2godWkpO1xuXHRcdHVpLnN0YXJ0KCk7XG5cblx0XHRFbC5zaG93KCdsZXZlbCcpO1xuXHRcdEVsLmhpZGUoJ2NoYXJfc2VsZWN0Jyk7XG5cdFx0RWwuaGlkZSgnZ2FtZW92ZXInKTtcblx0XHRFbC5oaWRlKCdnYW1ld2luJyk7XG5cdFx0c2NlbmUgPSAnbGV2ZWwnO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gU2hvd3MgdGhlIEdhbWUgT3ZlciBwb3B1cFxuXHQgKi9cblx0aW5zdGFuY2UuZW5kR2FtZSA9IGZ1bmN0aW9uIGVuZEdhbWUoKSB7XG5cdFx0RWwuc2hvdygnZ2FtZW92ZXInKTtcblx0XHRFbmdpbmUucGF1c2UoKTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFNob3dzIHRoZSBHYW1lIFdpbiBwb3B1cFxuXHQgKi9cblx0aW5zdGFuY2Uud2luR2FtZSA9IGZ1bmN0aW9uIHdpbkdhbWUoKSB7XG5cdFx0RWwuc2hvdygnZ2FtZXdpbicpO1xuXHRcdEVuZ2luZS5wYXVzZSgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gVGhlIHBsYXllciBwaWNrZWQgdXAgdGhlIGtleS4gU2hvdyBzdGFyIGV4cGxvc2lvbiBhbmQgYWR2YW5jZSBsZXZlbCBhZnRlciB0aW1lb3V0XG5cdCAqL1xuXHRpbnN0YW5jZS5sZXZlbENvbXBsZXRlID0gZnVuY3Rpb24gbGV2ZWxDb21wbGV0ZSgpIHtcblx0XHRNb2RlbC5zZXQoJ2xldmVsX2NvbXBsZXRlJywgdHJ1ZSk7XG5cdFx0RW5naW5lLmVudGl0aWVzLnB1c2gobmV3IEV4cGxvc2lvbigwLCAyKSk7XG5cdFx0c2V0VGltZW91dChpbnN0YW5jZS5uZXh0TGV2ZWwsIDE1MDApO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gQWR2YW5jZSB0byB0aGUgbmV4dCBsZXZlbCBvciBlbmQgdGhlIGdhbWUgaWYgbm8gbW9yZSBsZXZlbHNcblx0ICovXG5cdGluc3RhbmNlLm5leHRMZXZlbCA9IGZ1bmN0aW9uIG5leHRMZXZlbCgpIHtcblx0XHRsZXZlbC5uZXh0KCk7XG5cblx0XHRpZiAobGV2ZWwubGV2ZWwgPiBsZXZlbC5sYXN0TGV2ZWwpIHtcblx0XHRcdGluc3RhbmNlLndpbkdhbWUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aW5zdGFuY2Uuc3RhcnRHYW1lKCk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBpbnN0YW5jZTtcbn0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG4vKipcbiogQGRlc2NyaXB0aW9uIEEgc2Vuc29yIHVzZWQgYXMgYSBjb2xsaXNpb24gYm94IHRoYXQgY2FuIGJlIHJlbmRlcmVkIHRvIHRoZSBzY3JlZW4gZm9yIHRlc3RpbmdcbiogQGNvbnN0cnVjdG9yXG4qIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggbG9jYXRpb25cbiogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBsb2NhdGlvblxuKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBIb3cgbG9uZyB0aGUgc2Vuc29yIGlzXG4qIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBIb3cgdGFsbCB0aGUgc2Vuc29yIGlzXG4qIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRYIC0gVGhlIG9mZnNldCBpbiB0aGUgeCBkaXJlY3Rpb25cbiogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFkgLSBUaGUgb2Zmc2V0IGluIHRoZSB5IGRpcmVjdGlvblxuKi9cbnZhciBTZW5zb3IgPSBmdW5jdGlvbiBTZW5zb3IoeCwgeSwgd2lkdGgsIGhlaWdodCwgb2Zmc2V0WCwgb2Zmc2V0WSkge1xuXHR0aGlzLnggPSB4O1xuXHR0aGlzLnkgPSB5O1xuXHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHR0aGlzLm9mZnNldFggPSBvZmZzZXRYO1xuXHR0aGlzLm9mZnNldFkgPSBvZmZzZXRZO1xuXHR0aGlzLmRlYnVnID0gdHJ1ZTtcbn07XG5cbihmdW5jdGlvbiBQcm90b3R5cGUoKSB7XG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gUmVuZGVycyB0aGlzIGVudGl0eSB0byB0aGUgY2FudmFzXG5cdCAqIEBwYXJhbSB7Y29udGV4dH0gY3R4IC0gVGhlIGNhbnZhcydzIGNvbnRleHRcblx0ICovXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGN0eCkge1xuXHRcdGlmICh0aGlzLmRlYnVnKSB7XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSAncmVkJztcblx0XHRcdGN0eC5yZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gVXBkYXRlcyB0aGUgc2Vuc29yJ3MgcG9zaXRpb25cblx0ICogQHBhcmFtIHtpbnR9IHggLSBUaGUgeCBsb2NhdGlvblxuXHQgKiBAcGFyYW0ge2ludH0geSAtIFRoZSB5IGxvY2F0aW9uXG5cdCAqL1xuXHR0aGlzLnBvc2l0aW9uID0gZnVuY3Rpb24gcG9zaXRpb24oeCwgeSkge1xuXHRcdHRoaXMueCA9IHggKyB0aGlzLm9mZnNldFg7XG5cdFx0dGhpcy55ID0geSArIHRoaXMub2Zmc2V0WTtcblx0fTtcbn0pLmNhbGwoU2Vuc29yLnByb3RvdHlwZSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKipcbiogQGRlc2NyaXB0aW9uIEEgY29tcG9uZW50IHRoYXQgcmVuZGVycyB0aGUgb3duZXJzIHNwcml0ZSBhY2NvcmRpbmcgdG8gcG9zaXRpb24sIGFscGhhIGFuZCBkaXJlY3Rpb25cbiogQGNvbnN0cnVjdG9yXG4qL1xudmFyIFJlbmRlciA9IGZ1bmN0aW9uIFJlbmRlcihvd25lcikge1xuXHR0aGlzLm93bmVyID0gb3duZXI7XG59O1xuXG4oZnVuY3Rpb24gUHJvdG90eXBlKCkge1xuXHR2YXIgcCA9IHt4OiAwLCB5OiAwfTtcblx0LyoqXG5cdCAgKiBAZGVzY3JpcHRpb24gUmVuZGVycyB0aGUgb3duZXIncyBzcHJpdGVcblx0ICAqIEBwYXJhbSB7Y29udGV4dH0gY3R4IC0gVGhlIGNhbnZhcydzIGNvbnRleHRcblx0ICAqL1xuXHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihjdHgpIHtcblx0XHR2YXIgZmxpcHBlZCA9IHRoaXMub3duZXIuZmxpcHBlZCA/IC0xIDogMTtcblx0XHR2YXIgcG9zID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuXHRcdGN0eC5zYXZlKCk7XG5cdFx0Y3R4LnNjYWxlKGZsaXBwZWQsIDEpO1xuXHRcdGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMub3duZXIuYWxwaGEgfHwgMTtcblx0XHRjdHguZHJhd0ltYWdlKFJlc291cmNlcy5nZXQodGhpcy5vd25lci5zcHJpdGUpLCBwb3MueCwgcG9zLnksIDEwMSwgMTcxKTtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIGZvcm1hdHRlZCBwb3NpdGlvblxuXHQgICovXG5cdHRoaXMuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiBnZXRQb3NpdGlvbigpIHtcblx0XHR2YXIgZmxpcHBlZCA9IHRoaXMub3duZXIuZmxpcHBlZCA/IC0xIDogMTtcblx0XHRwLnggPSAodGhpcy5vd25lci54ICsgdGhpcy5vd25lci5vZmZzZXRYKSAqIGZsaXBwZWQ7XG5cdFx0cC54ICs9IChmbGlwcGVkID09PSAxID8gMCA6IC0xMDEpO1xuXHRcdHAueSA9IHRoaXMub3duZXIueSArIHRoaXMub3duZXIub2Zmc2V0WTtcblx0XHRyZXR1cm4gcDtcblx0fTtcbn0pLmNhbGwoUmVuZGVyLnByb3RvdHlwZSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKipcbiogQGRlc2NyaXB0aW9uIFRoZSBpbmdhbWUgaW5mb3JtYXRpb24gZGlzcGxheVxuKiBAY29uc3RydWN0b3JcbiovXG52YXIgVUkgPSBmdW5jdGlvbiBVSSgpIHtcblx0dGhpcy5rZXlzID0gMDtcblx0dGhpcy5sZXZlbFRpbWUgPSAwO1xuXHR0aGlzLnRpbWUgPSAwO1xufTtcblxuKGZ1bmN0aW9uIFByb3RvdHlwZSgpIHtcblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBSZXNldHMgdGhlIGxldmVsIGluZm9ybWF0aW9uIGFuZCBzdGFydHMgdGhlIGdhbWUgdGltZXJcblx0ICovXG5cdHRoaXMuc3RhcnQgPSBmdW5jdGlvbiBzdGFydCgpIHtcblx0XHR0aGlzLmtleXMgPSBNb2RlbC5nZXQoJ2xldmVsJyk7XG5cdFx0dGhpcy5sZXZlbFRpbWUgPSBNb2RlbC5nZXQoJ2xldmVsX3RvdGFsX3RpbWUnKTtcblxuXHRcdHRoaXMubGV2ZWxUaW1lciA9IG5ldyBUaW1lcigxLCB0aGlzLmxldmVsVGltZSk7XG5cdFx0dGhpcy5sZXZlbFRpbWVyLm9uKCdDT01QTEVURScsIHRoaXMub25UaW1lckNvbXBsZXRlKTtcblx0XHR0aGlzLmxldmVsVGltZXIuc3RhcnQoKTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFRoZSBsZXZlbCB0aW1lciBoYXMgY29tcGxldGVkXG5cdCAqL1xuXHR0aGlzLm9uVGltZXJDb21wbGV0ZSA9IGZ1bmN0aW9uIG9uVGltZXJDb21wbGV0ZSgpIHtcblx0XHRpZiAoIU1vZGVsLmdldCgnbGV2ZWxfY29tcGxldGUnKSkge1xuXHRcdFx0U2NlbmUuZW5kR2FtZSgpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIEZvcm1hdGVkIHN0cmluZyBvZiB0aW1lIGxlZnQgKGV4cGVjdHMgPjAgJiYgPDYwIHNlY29uZHMpXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFNlY29uZHMgbGVmdCBvbiB0aW1lXG5cdCAqL1xuXHR0aGlzLmZvcm1hdHRlZFRpbWUgPSBmdW5jdGlvbiBmb3JtYXR0ZWRUaW1lKCkge1xuXHRcdHZhciB0aW1lID0gTWF0aC5yb3VuZCh0aGlzLmxldmVsVGltZXIudGltZSk7XG5cdFx0cmV0dXJuICcwMDonICsgKHRpbWUgPiA5ID8gdGltZSA6ICcwJyArIHRpbWUpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gUmVuZGVycyB0ZXh0IHRvIHRoZSBzY3JlZW5cblx0ICogQHBhcmFtIHtjb250ZXh0fSBjdHggLSBUaGUgY2FudmFzJ3MgY29udGV4dFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gVGhlIHN0cmluZyB0byBkaXNwbGF5XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggbG9jYXRpb25cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBsb2NhdGlvblxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYWxpZ24gLSBUaGUgY2FudmFzJ3MgY29udGV4dFxuXHQgKi9cblx0dGhpcy50ZXh0ID0gZnVuY3Rpb24gdGV4dChjdHgsIHN0cmluZywgeCwgeSwgYWxpZ24pIHtcblx0XHRjdHguc2F2ZSgpO1xuXHRcdGN0eC5mb250ID0gJzMwcHggQ29taWMgU2FucyBNUyc7XG5cdFx0aWYgKGFsaWduID09PSAnbGVmdCcgfHwgYWxpZ24gPT09ICdyaWdodCcgfHwgYWxpZ24gPT09ICdjZW50ZXInKSB7XG5cdFx0XHRjdHgudGV4dEFsaWduID0gYWxpZ247XG5cdFx0fVxuXHRcdGN0eC5maWxsVGV4dChzdHJpbmcsIHgsIHkpO1xuXHRcdGN0eC5yZXN0b3JlKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBVcGRhdGVzIHRoZSB0aW1lciBhbmQga2V5IGluZm9ybWF0aW9uXG5cdCAqIEBwYXJhbSB7aW50fSBkdCAtIFRpbWUgc2luY2UgbGFzdCB1cGRhdGVcblx0ICovXG5cdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGR0KSB7XG5cdFx0aWYgKCFNb2RlbC5nZXQoJ2xldmVsX2NvbXBsZXRlJykpIHtcblx0XHRcdHRoaXMua2V5cyA9IE1vZGVsLmdldCgnbGV2ZWwnKTtcblx0XHRcdHRoaXMubGV2ZWxUaW1lci51cGRhdGUoZHQpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJlbmRlcnMgdGhpcyBlbnRpdHkgdG8gdGhlIGNhbnZhc1xuXHQgKiBAcGFyYW0ge2NvbnRleHR9IGN0eCAtIFRoZSBjYW52YXMncyBjb250ZXh0XG5cdCAqL1xuXHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihjdHgpIHtcblx0XHR0aGlzLnRleHQoY3R4LCAnS2V5czogeCcgKyB0aGlzLmtleXMsIDAsIDMwKTtcblx0XHR0aGlzLnRleHQoY3R4LCAnVGltZTogJyArIHRoaXMuZm9ybWF0dGVkVGltZSgpLCBFbmdpbmUud2lkdGgsIDMwLCAncmlnaHQnKTtcblx0fTtcbn0pLmNhbGwoVUkucHJvdG90eXBlKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuKiBAZGVzY3JpcHRpb24gS2V5IGVudGl0eVxuKiBAY29uc3RydWN0b3JcbiogQHBhcmFtIHtpbnR9IHJvdyAtIFRoZSBpbml0aWFsIHJvd1xuKiBAcGFyYW0ge2ludH0gY29sIC0gVGhlIGluaXRpYWwgY29sdW1uXG4qL1xudmFyIEtleSA9IGZ1bmN0aW9uIEtleShyb3csIGNvbCkge1xuXHR0aGlzLmVudGl0eSA9IG5ldyBFbnRpdHkodGhpcyxcblx0XHRHcmlkLmdldFhGcm9tQ29sdW1uKGNvbCksXG5cdFx0R3JpZC5nZXRZRnJvbVJvdyhyb3cpLFxuXHRcdCdpbWFnZXMvS2V5LnBuZycsXG5cdFx0MCxcblx0XHQtKDE3MSAtIDEzOCkgLSBHcmlkLm9mZnNldFkpO1xuXHR0aGlzLnNlbnNvciA9IG5ldyBTZW5zb3IoMCwgMCwgNTAsIDMwLCAyNSwgMjUpO1xuXHR0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcih0aGlzKTtcbn07XG5cbihmdW5jdGlvbiBQcm90b3R5cGUoKSB7XG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gQ2hlY2tzIGlmIHRoaXMgZW50aXR5IGlzIGNvbGxpZGluZyB3aXRoIHRoZSBwbGF5ZXJcblx0ICogQHBhcmFtIHtpbnR9IGR0IC0gVGltZSBzaW5jZSBsYXN0IHVwZGF0ZVxuXHQgKi9cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcblx0XHR0aGlzLnNlbnNvci5wb3NpdGlvbih0aGlzLngsIHRoaXMueSk7XG5cdFx0aWYgKHBsYXllciAmJiBwbGF5ZXIuaXNBbGl2ZSAmJiB0aGlzLmlzQWxpdmUpIHtcblx0XHRcdGlmIChDb2xsaXNpb24uaXNDb2xsaWRpbmcodGhpcy5zZW5zb3IsIHBsYXllci5zZW5zb3IpKSB7XG5cdFx0XHRcdHRoaXMuaXNBbGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRwbGF5ZXIuaGl0KCdrZXknKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBSZW5kZXJzIHRoaXMgZW50aXR5IHRvIHRoZSBjYW52YXNcblx0ICogQHBhcmFtIHtjb250ZXh0fSBjdHggLSBUaGUgY2FudmFzJ3MgY29udGV4dFxuXHQgKi9cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoY3R4KSB7XG5cdFx0dGhpcy5yZW5kZXJlci5yZW5kZXIoY3R4KTtcblx0XHR0aGlzLnNlbnNvci5yZW5kZXIoY3R4KTtcblx0fTtcbn0pLmNhbGwoS2V5LnByb3RvdHlwZSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKipcbiogQGRlc2NyaXB0aW9uIFdhdGVyIGVudGl0eVxuKiBAY29uc3RydWN0b3JcbiogQHBhcmFtIHtpbnR9IHJvdyAtIFRoZSBpbml0aWFsIHJvd1xuKiBAcGFyYW0ge2ludH0gY29sIC0gVGhlIGluaXRpYWwgY29sdW1uXG4qL1xudmFyIFdhdGVyID0gZnVuY3Rpb24gV2F0ZXIocm93LCBjb2wpIHtcblx0dGhpcy5lbnRpdHkgPSBuZXcgRW50aXR5KHRoaXMsXG5cdFx0R3JpZC5nZXRYRnJvbUNvbHVtbihjb2wpLFxuXHRcdEdyaWQuZ2V0WUZyb21Sb3cocm93KSxcblx0XHQnaW1hZ2VzL0tleS5wbmcnLFxuXHRcdDAsXG5cdFx0LSgxNzEgLSAxMzgpIC0gR3JpZC5vZmZzZXRZKTtcblx0dGhpcy5zZW5zb3IgPSBuZXcgU2Vuc29yKDAsIDAsIDUwLCAzMCwgMjUsIDI1KTtcbn07XG5cbihmdW5jdGlvbiBQcm90b3R5cGUoKSB7XG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gQ2hlY2tzIGlmIHRoaXMgZW50aXR5IGlzIGNvbGxpZGluZyB3aXRoIHRoZSBwbGF5ZXJcblx0ICogQHBhcmFtIHtpbnR9IGR0IC0gVGltZSBzaW5jZSBsYXN0IHVwZGF0ZVxuXHQgKi9cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcblx0XHR0aGlzLnNlbnNvci5wb3NpdGlvbih0aGlzLngsIHRoaXMueSk7XG5cblx0XHRpZiAocGxheWVyICYmIHBsYXllci5pc0FsaXZlKSB7XG5cdFx0XHRpZiAoQ29sbGlzaW9uLmlzQ29sbGlkaW5nKHRoaXMuc2Vuc29yLCBwbGF5ZXIuc2Vuc29yKSkge1xuXHRcdFx0XHRwbGF5ZXIuaGl0KCd3YXRlcicpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJlbmRlcnMgdGhpcyBlbnRpdHkgdG8gdGhlIGNhbnZhc1xuXHQgKiBAcGFyYW0ge2NvbnRleHR9IGN0eCAtIFRoZSBjYW52YXMncyBjb250ZXh0XG5cdCAqL1xuXHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihjdHgpIHtcblx0XHR0aGlzLnNlbnNvci5yZW5kZXIoY3R4KTtcblx0fTtcbn0pLmNhbGwoV2F0ZXIucHJvdG90eXBlKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuICogQGRlc2NyaXB0aW9uIEVuZW15IGVudGl0eVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2ludH0gcm93IC0gVGhlIGluaXRpYWwgcm93XG4gKiBAcGFyYW0ge2ludH0gY29sIC0gVGhlIGluaXRpYWwgY29sdW1uXG4gKiBAcGFyYW0ge251bWJlcn0gc3BlZWQgLSBUaGUgaW5pdGlhbCBzcGVlZFxuICovXG52YXIgRW5lbXkgPSBmdW5jdGlvbiBFbmVteShyb3csIGNvbCwgc3BlZWQpIHtcblx0dGhpcy5lbnRpdHkgPSBuZXcgRW50aXR5KHRoaXMsXG5cdFx0R3JpZC5nZXRYRnJvbUNvbHVtbihjb2wpLFxuXHRcdEdyaWQuZ2V0WUZyb21Sb3cocm93KSxcblx0XHQnaW1hZ2VzL2VuZW15LWJ1Zy5wbmcnLFxuXHRcdDAsIC0oMTcxIC0gMTM4KSAtIEdyaWQub2Zmc2V0WSk7XG5cdHRoaXMucm93ID0gcm93O1xuXHR0aGlzLnNwZWVkID0gc3BlZWQ7XG5cdHRoaXMuZmxpcHBlZCA9IHNwZWVkIDwgMDtcblx0dGhpcy5zZW5zb3IgPSBuZXcgU2Vuc29yKDAsIDAsIDUwLCA1MCwgMjUsIDEyKTtcblx0dGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXIodGhpcyk7XG59O1xuXG4oZnVuY3Rpb24gUHJvdG90eXBlKCkge1xuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIENoZWNrcyBpZiB0aGlzIGVudGl0eSBpcyBjb2xsaWRpbmcgd2l0aCB0aGUgcGxheWVyIGFuZCBrZWVwcyB0YXJnZXQgb24gc2NyZWVuIGJ5IHdyYXBwaW5nIHggbG9jYXRpb25cblx0ICogQHBhcmFtIHtpbnR9IGR0IC0gVGltZSBzaW5jZSBsYXN0IHVwZGF0ZVxuXHQgKi9cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcblx0XHR0aGlzLnggKz0gZHQgKiB0aGlzLnNwZWVkO1xuXG5cdFx0Ly8gIFdyYXBcblx0XHRpZiAodGhpcy54ID4gKEdyaWQuY29sdW1ucyAqIEdyaWQuY2VsbFdpZHRoKSArIEdyaWQuY2VsbFdpZHRoKSB7XG5cdFx0XHR0aGlzLnggPSBHcmlkLmdldFhGcm9tQ29sdW1uKDApIC0gR3JpZC5jZWxsV2lkdGg7XG5cdFx0fSBlbHNlIGlmICh0aGlzLnggPCAtR3JpZC5jZWxsV2lkdGgpIHtcblx0XHRcdHRoaXMueCA9IChHcmlkLmNvbHVtbnMgKiBHcmlkLmNlbGxXaWR0aCkgKyBHcmlkLmNlbGxXaWR0aDtcblx0XHR9XG5cblx0XHR0aGlzLnNlbnNvci5wb3NpdGlvbih0aGlzLngsIHRoaXMueSk7XG5cdFx0aWYgKHBsYXllciAmJiBwbGF5ZXIuaXNBbGl2ZSkge1xuXHRcdFx0aWYgKENvbGxpc2lvbi5pc0NvbGxpZGluZyh0aGlzLnNlbnNvciwgcGxheWVyLnNlbnNvcikpIHtcblx0XHRcdFx0cGxheWVyLmhpdCgnZW5lbXknKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBSZW5kZXJzIHRoaXMgZW50aXR5IHRvIHRoZSBjYW52YXNcblx0ICogQHBhcmFtIHtjb250ZXh0fSBjdHggLSBUaGUgY2FudmFzJ3MgY29udGV4dFxuXHQgKi9cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoY3R4KSB7XG5cdFx0dGhpcy5yZW5kZXJlci5yZW5kZXIoY3R4KTtcblx0XHR0aGlzLnNlbnNvci5yZW5kZXIoY3R4KTtcblx0fTtcbn0pLmNhbGwoRW5lbXkucHJvdG90eXBlKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuKiBAZGVzY3JpcHRpb24gUGxheWVyIGVudGl0eVxuKiBAY29uc3RydWN0b3JcbiovXG52YXIgUGxheWVyID0gZnVuY3Rpb24gUGxheWVyKCkge1xuXHR0aGlzLmVudGl0eSA9IG5ldyBFbnRpdHkodGhpcyxcblx0XHQwLFxuXHRcdDAsXG5cdFx0J2ltYWdlcy9jaGFyLWJveS5wbmcnLFxuXHRcdDAsXG5cdFx0LSgxNzEgLSAxMzgpIC0gR3JpZC5vZmZzZXRZKTtcblx0dGhpcy5pc0FsaXZlID0gZmFsc2U7XG5cdHRoaXMuYWxwaGEgPSAwO1xuXHR0aGlzLnNlbnNvciA9IG5ldyBTZW5zb3IoMCwgMCwgNTAsIDMwLCAyNSwgMjUpO1xuXHR0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcih0aGlzKTtcblx0dGhpcy5ibGlua1RpbWVyID0gbmV3IFRpbWVyKDUsIDAuMik7XG5cblx0dmFyIHJlZiA9IHRoaXM7XG5cblx0dmFyIG9uQmxpbmtUaW1lckNvbXBsZXRlID0gZnVuY3Rpb24gb25CbGlua1RpbWVyQ29tcGxldGUoKSB7XG5cdFx0cmVmLmFscGhhID0gMTtcblx0XHRyZWYuaXNBbGl2ZSA9IHRydWU7XG5cdH07XG5cblx0dmFyIG9uQmxpbmtUaW1lclVwZGF0ZSA9IGZ1bmN0aW9uIG9uQmxpbmtUaW1lclVwZGF0ZSgpIHtcblx0XHRyZWYuYWxwaGEgPSAocmVmLmFscGhhID09PSAwLjQgPyAxIDogMC40KTtcblx0fTtcblxuXHR2YXIgb25LZXlVcCA9IGZ1bmN0aW9uIG9uS2V5VXAoZSkge1xuXHRcdHJlZi5oYW5kbGVJbnB1dChlKTtcblx0fTtcblxuXHR0aGlzLmJsaW5rVGltZXIub24oJ0NPTVBMRVRFJywgb25CbGlua1RpbWVyQ29tcGxldGUpO1xuXHR0aGlzLmJsaW5rVGltZXIub24oJ1VQREFURScsIG9uQmxpbmtUaW1lclVwZGF0ZSk7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgb25LZXlVcCk7XG5cblx0dGhpcy5yZXNwYXduKCk7XG59O1xuXG4oZnVuY3Rpb24gUHJvdG90eXBlKCkge1xuXHR2YXIgaW5wdXRNYXAgPSB7XG5cdFx0Mzc6ICdsZWZ0Jyxcblx0XHQzODogJ3VwJyxcblx0XHQzOTogJ3JpZ2h0Jyxcblx0XHQ0MDogJ2Rvd24nXG5cdH07XG5cblx0dmFyIGlucHV0UmVzcG9uc2VNYXAgPSB7XG5cdFx0bGVmdDoge2F4aXM6ICd4JywgZGlyOiAtMX0sXG5cdFx0dXA6IHtheGlzOiAneScsIGRpcjogLTF9LFxuXHRcdHJpZ2h0OiB7YXhpczogJ3gnLCBkaXI6IDF9LFxuXHRcdGRvd246IHtheGlzOiAneScsIGRpcjogMX1cblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJlc2V0cyB0aGUgcGxheWVyIHRvIHRoZSBpbml0aWFsIHBvc2l0aW9uXG5cdCAqL1xuXHR0aGlzLnJlc3Bhd24gPSBmdW5jdGlvbiByZXNwYXduKCkge1xuXHRcdHRoaXMuc2Vuc29yLnggPSB0aGlzLnggPSBHcmlkLmdldFhGcm9tQ29sdW1uKDIpO1xuXHRcdHRoaXMuc2Vuc29yLnkgPSB0aGlzLnkgPSBHcmlkLmdldFlGcm9tUm93KDUpO1xuXHRcdHRoaXMuaXNBbGl2ZSA9IGZhbHNlO1xuXHRcdHRoaXMuYWxwaGEgPSAwLjQ7XG5cdFx0dGhpcy5ibGlua1RpbWVyLnN0YXJ0KCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBBIGVudGl0eSBoYXMgaGl0IHRoZSBwbGF5ZXJcblx0ICogQHBhcmFtIHtzdHJpbmd9IGludm9rZXIgLSBUeXBlIG9mIG9iamVjdCB0aGF0IGhpdCB0aGUgcGxheWVyXG5cdCAqL1xuXHR0aGlzLmhpdCA9IGZ1bmN0aW9uIGhpdChpbnZva2VyKSB7XG5cdFx0aWYgKGludm9rZXIgPT09ICd3YXRlcicgfHwgaW52b2tlciA9PT0gJ2VuZW15Jykge1xuXHRcdFx0dGhpcy5yZXNwYXduKCk7XG5cdFx0fWVsc2UgaWYgKGludm9rZXIgPT09ICdrZXknKSB7XG5cdFx0XHRTY2VuZS5sZXZlbENvbXBsZXRlKCk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gR2V0cyB0aGUgcG9zaXRpb24gb24gdGhlIGdyaWQgYmFzZWQgb24gcGxheWVyJ3MgaW5wdXRcblx0ICogQHBhcmFtIHtzdHJpbmd9IGF4aXMgLSBUaGUgeCBvciB5IGF4aXNcblx0ICogQHBhcmFtIHtpbnB1dH0gZGlyIC0gVGhlIHBvc2l0aXZlIG9yIG5lZ2F0aXZlIGRpcmVjdGlvblxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZmluYWwgcG9zaXRpb25cblx0ICovXG5cdHRoaXMuZ2V0TW92ZW1lbnQgPSBmdW5jdGlvbiBnZXRNb3ZlbWVudChheGlzLCBkaXIpIHtcblx0XHR2YXIgdjtcblxuXHRcdGlmIChheGlzID09PSAneCcpIHtcblx0XHRcdHYgPSBNYXRoLmZsb29yKHRoaXMueCAvIEdyaWQuY2VsbFdpZHRoKSArIGRpcjtcblx0XHRcdHJldHVybiBHcmlkLmdldFhGcm9tQ29sdW1uKHYpO1xuXHRcdH1cblxuXHRcdHYgPSBNYXRoLmZsb29yKHRoaXMueSAvIEdyaWQuY2VsbEhlaWdodCkgKyBkaXI7XG5cdFx0cmV0dXJuIEdyaWQuZ2V0WUZyb21Sb3codik7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBDaGFuZ2VzIHRoZSBwbGF5ZXIgcG9zaXRpb24gYmFzZWQgb24gaW5wdXRcblx0ICogQHBhcmFtIHtldmVudH0gZSAtIFRoZSBldmVudCB0aGF0IG9jY3VyZWRcblx0ICovXG5cdHRoaXMuaGFuZGxlSW5wdXQgPSBmdW5jdGlvbiBoYW5kbGVJbnB1dChlKSB7XG5cdFx0dmFyIGlucHV0ID0gaW5wdXRNYXBbZS5rZXlDb2RlXTtcblx0XHRpZiAoaW5wdXQgJiYgdGhpcy5pc0FsaXZlID09PSB0cnVlICYmICFNb2RlbC5nZXQoJ2xldmVsX2NvbXBsZXRlJykpIHtcblx0XHRcdHZhciBtYXAgPSBpbnB1dFJlc3BvbnNlTWFwW2lucHV0XTtcblxuXHRcdFx0Ly8gIE1vdmVtZW50XG5cdFx0XHRpZiAobWFwLmhhc093blByb3BlcnR5KCdheGlzJykpIHtcblx0XHRcdFx0dGhpc1ttYXAuYXhpc10gPSB0aGlzLmdldE1vdmVtZW50KG1hcC5heGlzLCBtYXAuZGlyKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBVcGRhdGVzIHRoZSBwbGF5ZXJzIHRpbWVyIGFuZCBzZW5zb3Jcblx0ICogQHBhcmFtIHtudW1iZXJ9IGR0IC0gVGltZSBzaW5jZSBsYXN0IHVwZGF0ZVxuXHQgKi9cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcblx0XHR0aGlzLnNlbnNvci5wb3NpdGlvbih0aGlzLngsIHRoaXMueSk7XG5cdFx0aWYgKCF0aGlzLmlzQWxpdmUpIHtcblx0XHRcdHRoaXMuYmxpbmtUaW1lci51cGRhdGUoZHQpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIFJlbmRlcnMgdGhpcyBlbnRpdHkgdG8gdGhlIGNhbnZhc1xuXHQgKiBAcGFyYW0ge2NvbnRleHR9IGN0eCAtIFRoZSBjYW52YXMncyBjb250ZXh0XG5cdCAqL1xuXHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihjdHgpIHtcblx0XHR0aGlzLnJlbmRlcmVyLnJlbmRlcihjdHgpO1xuXHRcdHRoaXMuc2Vuc29yLnJlbmRlcihjdHgpO1xuXHR9O1xufSkuY2FsbChQbGF5ZXIucHJvdG90eXBlKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qKlxuKiBAZGVzY3JpcHRpb24gU3RhciBlbnRpdHlcbiogQGNvbnN0cnVjdG9yXG4qIEBwYXJhbSB7aW50fSByb3cgLSBUaGUgaW5pdGlhbCByb3dcbiogQHBhcmFtIHtpbnR9IGNvbCAtIFRoZSBpbml0aWFsIGNvbHVtblxuKi9cbnZhciBTdGFyID0gZnVuY3Rpb24gU3Rhcihyb3csIGNvbCkge1xuXHR0aGlzLmVudGl0eSA9IG5ldyBFbnRpdHkodGhpcyxcblx0XHRHcmlkLmdldFhGcm9tQ29sdW1uKGNvbCksXG5cdFx0R3JpZC5nZXRZRnJvbVJvdyhyb3cpLFxuXHRcdCdpbWFnZXMvU3Rhci5wbmcnLFxuXHRcdDAsXG5cdFx0LSgxNzEgLSAxMzgpIC0gR3JpZC5vZmZzZXRZKTtcblx0dGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXIodGhpcyk7XG5cdHRoaXMuc3BlZWQgPSA1MDA7XG5cdHRoaXMuYW5nbGUgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxODApICogTWF0aC5QSSAvIDE4MDtcbn07XG5cbihmdW5jdGlvbiBQcm90b3R5cGUoKSB7XG5cdC8qKlxuXHQgKiBAZGVzY3JpcHRpb24gTW92ZXMgdGhlIHN0YXIgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgYW5nbGUgYW5kIGxvd2VycyBvcGFjaXR5XG5cdCAqIEBwYXJhbSB7aW50fSBkdCAtIFRpbWUgc2luY2UgbGFzdCB1cGRhdGVcblx0ICovXG5cdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGR0KSB7XG5cdFx0dGhpcy54ICs9IHRoaXMuc3BlZWQgKiBNYXRoLmNvcyh0aGlzLmFuZ2xlKSAqIGR0O1xuXHRcdHRoaXMueSArPSB0aGlzLnNwZWVkICogTWF0aC5zaW4odGhpcy5hbmdsZSkgKiBkdDtcblx0XHR0aGlzLmFscGhhID0gTWF0aC5tYXgoMC4wMSwgdGhpcy5hbHBoYSAtIDEgKiBkdCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXNjcmlwdGlvbiBSZW5kZXJzIHRoaXMgZW50aXR5IHRvIHRoZSBjYW52YXNcblx0ICogQHBhcmFtIHtjb250ZXh0fSBjdHggLSBUaGUgY2FudmFzJ3MgY29udGV4dFxuXHQgKi9cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoY3R4KSB7XG5cdFx0dGhpcy5yZW5kZXJlci5yZW5kZXIoY3R4KTtcblx0fTtcbn0pLmNhbGwoU3Rhci5wcm90b3R5cGUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyoqXG4qIEBkZXNjcmlwdGlvbiBLZXkgZW50aXR5XG4qIEBjb25zdHJ1Y3RvclxuKiBAcGFyYW0ge2ludH0gcm93IC0gVGhlIGluaXRpYWwgcm93XG4qIEBwYXJhbSB7aW50fSBjb2wgLSBUaGUgaW5pdGlhbCBjb2x1bW5cbiovXG52YXIgRXhwbG9zaW9uID0gZnVuY3Rpb24gRXhwbG9zaW9uKHJvdywgY29sKXtcbiAgICB0aGlzLnN0YXJzID0gW107XG4gICAgdGhpcy5hZGRTdGFycyhyb3csIGNvbCwgMTApO1xufTtcblxuKGZ1bmN0aW9uIFByb3RvdHlwZSgpIHtcbiAgICBcbiAgICAvKipcbiAgICAqIEBkZXNjcmlwdGlvbiBBZGRzIHRoZSBzdGFyc1xuICAgICogQHBhcmFtIHtpbnR9IHJvdyAtIFRoZSB5IGxvY2F0aW9uXG4gICAgKiBAcGFyYW0ge2ludH0gY29sIC0gVGhlIHggbG9jYXRpb25cbiAgICAqIEBwYXJhbSB7aW50fSB0b3RhbCAtIEFtb3VudCBvZiBzdGFyc1xuICAgICovXG4gICAgdGhpcy5hZGRTdGFycyA9IGZ1bmN0aW9uIGFkZFN0YXJzKHJvdywgY29sLCB0b3RhbCl7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IoaT0wOyBpPHRvdGFsOyBpKyspe1xuICAgICAgICAgICAgdGhpcy5zdGFycy5wdXNoKG5ldyBTdGFyKHJvdywgY29sKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBkZXNjcmlwdGlvbiBNb3ZlcyBhbGwgdGhlIHN0YXJzXG4gICAgKiBAcGFyYW0ge2ludH0gZHQgLSBUaW1lIHNpbmNlIGxhc3QgdXBkYXRlXG4gICAgKi9cbiAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLnN0YXJzLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmKHRvdGFsID4gMCl7XG4gICAgICAgICAgICBpZih0aGlzLnN0YXJzWzBdLmFscGhhIDw9IDAuMDEpe1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnMgPSBbXTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGZvcihpPTA7IGk8dG90YWw7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnNbaV0udXBkYXRlKGR0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICogQGRlc2NyaXB0aW9uIFJlbmRlcnMgdGhlIHN0YXJzIHRvIHRoZSBjYW52YXNcbiAgICAqIEBwYXJhbSB7Y29udGV4dH0gY3R4IC0gVGhlIGNhbnZhcydzIGNvbnRleHRcbiAgICAqL1xuICAgIHRoaXMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGN0eCkge1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLnN0YXJzLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvcihpPTA7IGk8dG90YWw7IGkrKyl7XG4gICAgICAgICAgICB0aGlzLnN0YXJzW2ldLnJlbmRlcihjdHgpO1xuICAgICAgICB9XG4gICAgfTtcblxufSkuY2FsbChFeHBsb3Npb24ucHJvdG90eXBlKTsiLCIndXNlIHN0cmljdCc7XG52YXIgU2NlbmUgPSBTY2VuZSB8fCB7fTtcbnZhciBFbCA9IEVsIHx8IHt9O1xudmFyIFVJID0gVUkgfHwge307XG52YXIgUGxheWVyID0gUGxheWVyIHx8IHt9O1xudmFyIHBsYXllciA9IG5ldyBQbGF5ZXIoKTtcbnZhciB1aSA9IG5ldyBVSSgpO1xudmFyIHNjZW5lID0gJyc7XG52YXIgQXBwID0gKGZ1bmN0aW9uIEFwcCgpIHtcblx0dmFyIG9uUGxheUNsaWNrZWQgPSBmdW5jdGlvbiBvblBsYXlDbGlja2VkKCkge1xuXHRcdFNjZW5lLnN0YXJ0R2FtZSh0cnVlKTtcblx0fTtcblx0dmFyIG9uUmVwbGF5Q2xpY2tlZCA9IGZ1bmN0aW9uIG9uUmVwbGF5Q2xpY2tlZCgpIHtcblx0XHRTY2VuZS5zdGFydEdhbWUoKTtcblx0fTtcblx0dmFyIG9uTWVudUNsaWNrZWQgPSBmdW5jdGlvbiBvbk1lbnVDbGlja2VkKCkge1xuXHRcdFNjZW5lLnN0YXJ0TWVudSgpO1xuXHR9O1xuXG5cdEVsLmFkZExpc3RlbmVyKEVsLmdldEVsZW1lbnRzKCdidG4tcGxheScpWzBdLCAnY2xpY2snLCBvblBsYXlDbGlja2VkKTtcblx0RWwuYWRkTGlzdGVuZXIoRWwuZ2V0RWxlbWVudHMoJ2J0bi1yZXBsYXknKVswXSwgJ2NsaWNrJywgb25SZXBsYXlDbGlja2VkKTtcblx0RWwuYWRkTGlzdGVuZXIoRWwuZ2V0RWxlbWVudHMoJ2J0bi1tZW51JyksICdjbGljaycsIG9uTWVudUNsaWNrZWQpO1xuXG5cdC8vXHREZWZhdWx0IHNob3cgdGhlIHN0YXJ0IG1lbnVcblx0U2NlbmUuc3RhcnRNZW51KCk7XG5cdC8vXHRTY2VuZS5zdGFydEdhbWUoKTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
